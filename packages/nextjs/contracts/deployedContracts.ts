/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  1660990954: {
    Whisp: {
      address: "0x4309Eb90A37cfD0ecE450305B24a2DE68b73f312",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "semaphore_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              indexed: false,
              internalType: "string",
              name: "description",
              type: "string",
            },
          ],
          name: "GroupCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "member",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "commitment",
              type: "uint256",
            },
          ],
          name: "MemberJoined",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "signalHash",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "scopeHash",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "nullifier",
              type: "uint256",
            },
          ],
          name: "SignalSent",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
          ],
          name: "createGroup",
          outputs: [
            {
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "groups",
          outputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "uint64",
              name: "createdAt",
              type: "uint64",
            },
            {
              internalType: "bool",
              name: "exists",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "hasJoined",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
          ],
          name: "joinGroup",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "nextGroupIndex",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "nullifierUsed",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "semaphore",
          outputs: [
            {
              internalType: "contract ISemaphore",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "getUserGroups",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "groupId",
                  type: "uint256",
                },
                {
                  internalType: "address",
                  name: "creator",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "description",
                  type: "string",
                },
                {
                  internalType: "uint64",
                  name: "createdAt",
                  type: "uint64",
                },
                {
                  internalType: "bool",
                  name: "exists",
                  type: "bool",
                },
              ],
              internalType: "struct Whisp.GroupMeta[]",
              name: "out",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "registryId",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "merkleTreeDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "merkleTreeRoot",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nullifier",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "message",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "scope",
                  type: "uint256",
                },
                {
                  internalType: "uint256[8]",
                  name: "points",
                  type: "uint256[8]",
                },
              ],
              internalType: "struct ISemaphore.SemaphoreProof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "validateSignal",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 0,
    },
    HelloStatusNetwork: {
      address: "0x915e224387428061d046d8A0c0E6954eAe930E92",
      abi: [
        {
          inputs: [],
          name: "getGreet",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "greet",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_greet",
              type: "string",
            },
          ],
          name: "setGreet",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 11713751,
    },
    PoseidonT3: {
      address: "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
      abi: [
        {
          inputs: [
            {
              internalType: "uint256[2]",
              name: "",
              type: "uint256[2]",
            },
          ],
          name: "hash",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 11750512,
    },
    Semaphore: {
      address: "0x9d4454B023096f34B160D6B654540c56A1F81688",
      abi: [
        {
          inputs: [
            {
              internalType: "contract ISemaphoreVerifier",
              name: "_verifier",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "LeafAlreadyExists",
          type: "error",
        },
        {
          inputs: [],
          name: "LeafCannotBeZero",
          type: "error",
        },
        {
          inputs: [],
          name: "LeafDoesNotExist",
          type: "error",
        },
        {
          inputs: [],
          name: "LeafGreaterThanSnarkScalarField",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__CallerIsNotTheGroupAdmin",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__CallerIsNotThePendingGroupAdmin",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__GroupDoesNotExist",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__GroupHasNoMembers",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__InvalidProof",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__MerkleTreeDepthIsNotSupported",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__MerkleTreeRootIsExpired",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__MerkleTreeRootIsNotPartOfTheGroup",
          type: "error",
        },
        {
          inputs: [],
          name: "Semaphore__YouAreUsingTheSameNullifierTwice",
          type: "error",
        },
        {
          inputs: [],
          name: "WrongSiblingNodes",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "oldAdmin",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newAdmin",
              type: "address",
            },
          ],
          name: "GroupAdminPending",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "oldAdmin",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newAdmin",
              type: "address",
            },
          ],
          name: "GroupAdminUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "GroupCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "oldMerkleTreeDuration",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "newMerkleTreeDuration",
              type: "uint256",
            },
          ],
          name: "GroupMerkleTreeDurationUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "merkleTreeRoot",
              type: "uint256",
            },
          ],
          name: "MemberAdded",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "merkleTreeRoot",
              type: "uint256",
            },
          ],
          name: "MemberRemoved",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "newIdentityCommitment",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "merkleTreeRoot",
              type: "uint256",
            },
          ],
          name: "MemberUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "startIndex",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256[]",
              name: "identityCommitments",
              type: "uint256[]",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "merkleTreeRoot",
              type: "uint256",
            },
          ],
          name: "MembersAdded",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "merkleTreeDepth",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "merkleTreeRoot",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "nullifier",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "message",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "scope",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256[8]",
              name: "points",
              type: "uint256[8]",
            },
          ],
          name: "ProofValidated",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "acceptGroupAdmin",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
          ],
          name: "addMember",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256[]",
              name: "identityCommitments",
              type: "uint256[]",
            },
          ],
          name: "addMembers",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "admin",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "merkleTreeDuration",
              type: "uint256",
            },
          ],
          name: "createGroup",
          outputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "createGroup",
          outputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "admin",
              type: "address",
            },
          ],
          name: "createGroup",
          outputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "getGroupAdmin",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "getMerkleTreeDepth",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "getMerkleTreeRoot",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
          ],
          name: "getMerkleTreeSize",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "groupCounter",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "groups",
          outputs: [
            {
              internalType: "uint256",
              name: "merkleTreeDuration",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
          ],
          name: "hasMember",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
          ],
          name: "indexOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
            {
              internalType: "uint256[]",
              name: "merkleProofSiblings",
              type: "uint256[]",
            },
          ],
          name: "removeMember",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "newAdmin",
              type: "address",
            },
          ],
          name: "updateGroupAdmin",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "newMerkleTreeDuration",
              type: "uint256",
            },
          ],
          name: "updateGroupMerkleTreeDuration",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "identityCommitment",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "newIdentityCommitment",
              type: "uint256",
            },
            {
              internalType: "uint256[]",
              name: "merkleProofSiblings",
              type: "uint256[]",
            },
          ],
          name: "updateMember",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "merkleTreeDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "merkleTreeRoot",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nullifier",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "message",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "scope",
                  type: "uint256",
                },
                {
                  internalType: "uint256[8]",
                  name: "points",
                  type: "uint256[8]",
                },
              ],
              internalType: "struct ISemaphore.SemaphoreProof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "validateProof",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "verifier",
          outputs: [
            {
              internalType: "contract ISemaphoreVerifier",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "groupId",
              type: "uint256",
            },
            {
              components: [
                {
                  internalType: "uint256",
                  name: "merkleTreeDepth",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "merkleTreeRoot",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nullifier",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "message",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "scope",
                  type: "uint256",
                },
                {
                  internalType: "uint256[8]",
                  name: "points",
                  type: "uint256[8]",
                },
              ],
              internalType: "struct ISemaphore.SemaphoreProof",
              name: "proof",
              type: "tuple",
            },
          ],
          name: "verifyProof",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {
        acceptGroupAdmin: "contracts/interfaces/ISemaphore.sol",
        addMember: "contracts/interfaces/ISemaphore.sol",
        addMembers: "contracts/interfaces/ISemaphore.sol",
        createGroup: "contracts/interfaces/ISemaphore.sol",
        groupCounter: "contracts/interfaces/ISemaphore.sol",
        removeMember: "contracts/interfaces/ISemaphore.sol",
        updateGroupAdmin: "contracts/interfaces/ISemaphore.sol",
        updateGroupMerkleTreeDuration: "contracts/interfaces/ISemaphore.sol",
        updateMember: "contracts/interfaces/ISemaphore.sol",
        validateProof: "contracts/interfaces/ISemaphore.sol",
        verifyProof: "contracts/interfaces/ISemaphore.sol",
        getGroupAdmin: "contracts/base/SemaphoreGroups.sol",
        getMerkleTreeDepth: "contracts/base/SemaphoreGroups.sol",
        getMerkleTreeRoot: "contracts/base/SemaphoreGroups.sol",
        getMerkleTreeSize: "contracts/base/SemaphoreGroups.sol",
        hasMember: "contracts/base/SemaphoreGroups.sol",
        indexOf: "contracts/base/SemaphoreGroups.sol",
      },
      deployedOnBlock: 11750515,
    },
    SemaphoreVerifier: {
      address: "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "SemaphoreVerifier__ArrayLengthMismatch",
          type: "error",
        },
        {
          inputs: [],
          name: "SemaphoreVerifier__CallerIsNotOwner",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "depth",
              type: "uint256",
            },
          ],
          name: "SemaphoreVerifier__InvalidDepth",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "depth",
              type: "uint256",
            },
          ],
          name: "SemaphoreVerifier__VerificationKeyAlreadySet",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "depth",
              type: "uint256",
            },
          ],
          name: "SemaphoreVerifier__VerificationKeyNotConfigured",
          type: "error",
        },
        {
          inputs: [],
          name: "SemaphoreVerifier__VerificationKeysLocked",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "depth",
              type: "uint256",
            },
          ],
          name: "isVerificationKeyConfigured",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "lockVerificationKeys",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint8[]",
              name: "depths",
              type: "uint8[]",
            },
            {
              internalType: "uint256[14][]",
              name: "points",
              type: "uint256[14][]",
            },
          ],
          name: "uploadVerificationKeys",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "verificationKeysLocked",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256[2]",
              name: "_pA",
              type: "uint256[2]",
            },
            {
              internalType: "uint256[2][2]",
              name: "_pB",
              type: "uint256[2][2]",
            },
            {
              internalType: "uint256[2]",
              name: "_pC",
              type: "uint256[2]",
            },
            {
              internalType: "uint256[4]",
              name: "_pubSignals",
              type: "uint256[4]",
            },
            {
              internalType: "uint256",
              name: "merkleTreeDepth",
              type: "uint256",
            },
          ],
          name: "verifyProof",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 11750120,
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
