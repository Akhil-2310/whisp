{
  "language": "Solidity",
  "sources": {
    "@zk-kit/lean-imt.sol/Constants.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.4;\n\nuint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n"
    },
    "@zk-kit/lean-imt.sol/InternalLeanIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {PoseidonT3} from \"poseidon-solidity/PoseidonT3.sol\";\nimport {SNARK_SCALAR_FIELD} from \"./Constants.sol\";\n\nstruct LeanIMTData {\n    // Tracks the current number of leaves in the tree.\n    uint256 size;\n    // Represents the current depth of the tree, which can increase as new leaves are inserted.\n    uint256 depth;\n    // A mapping from each level of the tree to the node value of the last even position at that level.\n    // Used for efficient inserts, updates and root calculations.\n    mapping(uint256 => uint256) sideNodes;\n    // A mapping from leaf values to their respective indices in the tree.\n    // This facilitates checks for leaf existence and retrieval of leaf positions.\n    mapping(uint256 => uint256) leaves;\n}\n\nerror WrongSiblingNodes();\nerror LeafGreaterThanSnarkScalarField();\nerror LeafCannotBeZero();\nerror LeafAlreadyExists();\nerror LeafDoesNotExist();\n\n/// @title Lean Incremental binary Merkle tree.\n/// @dev The LeanIMT is an optimized version of the BinaryIMT.\n/// This implementation eliminates the use of zeroes, and make the tree depth dynamic.\n/// When a node doesn't have the right child, instead of using a zero hash as in the BinaryIMT,\n/// the node's value becomes that of its left child. Furthermore, rather than utilizing a static tree depth,\n/// it is updated based on the number of leaves in the tree. This approach\n/// results in the calculation of significantly fewer hashes, making the tree more efficient.\nlibrary InternalLeanIMT {\n    /// @dev Inserts a new leaf into the incremental merkle tree.\n    /// The function ensures that the leaf is valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the new leaf to be inserted into the tree.\n    /// @return The new hash of the node after the leaf has been inserted.\n    function _insert(LeanIMTData storage self, uint256 leaf) internal returns (uint256) {\n        if (leaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (leaf == 0) {\n            revert LeafCannotBeZero();\n        } else if (_has(self, leaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = self.size;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // A new insertion can increase a tree's depth by at most 1,\n        // and only if the number of leaves supported by the current\n        // depth is less than the number of leaves to be supported after insertion.\n        if (2 ** treeDepth < index + 1) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        uint256 node = leaf;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                node = PoseidonT3.hash([self.sideNodes[level], node]);\n            } else {\n                self.sideNodes[level] = node;\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        self.size = ++index;\n\n        self.sideNodes[treeDepth] = node;\n        self.leaves[leaf] = index;\n\n        return node;\n    }\n\n    /// @dev Inserts many leaves into the incremental merkle tree.\n    /// The function ensures that the leaves are valid according to the\n    /// constraints of the tree and then updates the tree's structure accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaves: The values of the new leaves to be inserted into the tree.\n    /// @return The root after the leaves have been inserted.\n    function _insertMany(LeanIMTData storage self, uint256[] calldata leaves) internal returns (uint256) {\n        // Cache tree size to optimize gas\n        uint256 treeSize = self.size;\n\n        // Check that all the new values are correct to be added.\n        for (uint256 i = 0; i < leaves.length; ) {\n            if (leaves[i] >= SNARK_SCALAR_FIELD) {\n                revert LeafGreaterThanSnarkScalarField();\n            } else if (leaves[i] == 0) {\n                revert LeafCannotBeZero();\n            } else if (_has(self, leaves[i])) {\n                revert LeafAlreadyExists();\n            }\n\n            self.leaves[leaves[i]] = treeSize + 1 + i;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Array to save the nodes that will be used to create the next level of the tree.\n        uint256[] memory currentLevelNewNodes;\n\n        currentLevelNewNodes = leaves;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        // Calculate the depth of the tree after adding the new values.\n        // Unlike the 'insert' function, we need a while here as\n        // N insertions can increase the tree's depth more than once.\n        while (2 ** treeDepth < treeSize + leaves.length) {\n            ++treeDepth;\n        }\n\n        self.depth = treeDepth;\n\n        // First index to change in every level.\n        uint256 currentLevelStartIndex = treeSize;\n\n        // Size of the level used to create the next level.\n        uint256 currentLevelSize = treeSize + leaves.length;\n\n        // The index where changes begin at the next level.\n        uint256 nextLevelStartIndex = currentLevelStartIndex >> 1;\n\n        // The size of the next level.\n        uint256 nextLevelSize = ((currentLevelSize - 1) >> 1) + 1;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            // The number of nodes for the new level that will be created,\n            // only the new values, not the entire level.\n            uint256 numberOfNewNodes = nextLevelSize - nextLevelStartIndex;\n            uint256[] memory nextLevelNewNodes = new uint256[](numberOfNewNodes);\n            for (uint256 i = 0; i < numberOfNewNodes; ) {\n                uint256 leftNode;\n\n                // Assign the left node using the saved path or the position in the array.\n                if ((i + nextLevelStartIndex) * 2 < currentLevelStartIndex) {\n                    leftNode = self.sideNodes[level];\n                } else {\n                    leftNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 - currentLevelStartIndex];\n                }\n\n                uint256 rightNode;\n\n                // Assign the right node if the value exists.\n                if ((i + nextLevelStartIndex) * 2 + 1 < currentLevelSize) {\n                    rightNode = currentLevelNewNodes[(i + nextLevelStartIndex) * 2 + 1 - currentLevelStartIndex];\n                }\n\n                uint256 parentNode;\n\n                // Assign the parent node.\n                // If it has a right child the result will be the hash(leftNode, rightNode) if not,\n                // it will be the leftNode.\n                if (rightNode != 0) {\n                    parentNode = PoseidonT3.hash([leftNode, rightNode]);\n                } else {\n                    parentNode = leftNode;\n                }\n\n                nextLevelNewNodes[i] = parentNode;\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            // Update the `sideNodes` variable.\n            // If `currentLevelSize` is odd, the saved value will be the last value of the array\n            // if it is even and there are more than 1 element in `currentLevelNewNodes`, the saved value\n            // will be the value before the last one.\n            // If it is even and there is only one element, there is no need to save anything because\n            // the correct value for this level was already saved before.\n            if (currentLevelSize & 1 == 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 1];\n            } else if (currentLevelNewNodes.length > 1) {\n                self.sideNodes[level] = currentLevelNewNodes[currentLevelNewNodes.length - 2];\n            }\n\n            currentLevelStartIndex = nextLevelStartIndex;\n\n            // Calculate the next level startIndex value.\n            // It is the position of the parent node which is pos/2.\n            nextLevelStartIndex >>= 1;\n\n            // Update the next array that will be used to calculate the next level.\n            currentLevelNewNodes = nextLevelNewNodes;\n\n            currentLevelSize = nextLevelSize;\n\n            // Calculate the size of the next level.\n            // The size of the next level is (currentLevelSize - 1) / 2 + 1.\n            nextLevelSize = ((nextLevelSize - 1) >> 1) + 1;\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        // Update tree size\n        self.size = treeSize + leaves.length;\n\n        // Update tree root\n        self.sideNodes[treeDepth] = currentLevelNewNodes[0];\n\n        return currentLevelNewNodes[0];\n    }\n\n    /// @dev Updates the value of an existing leaf and recalculates hashes\n    /// to maintain tree integrity.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf that is to be updated.\n    /// @param newLeaf: The new value that will replace the oldLeaf in the tree.\n    /// @param siblingNodes: An array of sibling nodes that are necessary to recalculate the path to the root.\n    /// @return The new hash of the updated node after the leaf has been updated.\n    function _update(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256 newLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        if (newLeaf >= SNARK_SCALAR_FIELD) {\n            revert LeafGreaterThanSnarkScalarField();\n        } else if (!_has(self, oldLeaf)) {\n            revert LeafDoesNotExist();\n        } else if (_has(self, newLeaf)) {\n            revert LeafAlreadyExists();\n        }\n\n        uint256 index = _indexOf(self, oldLeaf);\n        uint256 node = newLeaf;\n        uint256 oldRoot = oldLeaf;\n\n        uint256 lastIndex = self.size - 1;\n        uint256 i = 0;\n\n        // Cache tree depth to optimize gas\n        uint256 treeDepth = self.depth;\n\n        for (uint256 level = 0; level < treeDepth; ) {\n            if ((index >> level) & 1 == 1) {\n                if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                    revert LeafGreaterThanSnarkScalarField();\n                }\n\n                node = PoseidonT3.hash([siblingNodes[i], node]);\n                oldRoot = PoseidonT3.hash([siblingNodes[i], oldRoot]);\n\n                unchecked {\n                    ++i;\n                }\n            } else {\n                if (index >> level != lastIndex >> level) {\n                    if (siblingNodes[i] >= SNARK_SCALAR_FIELD) {\n                        revert LeafGreaterThanSnarkScalarField();\n                    }\n\n                    if (self.sideNodes[level] == oldRoot) {\n                        self.sideNodes[level] = node;\n                    }\n\n                    node = PoseidonT3.hash([node, siblingNodes[i]]);\n                    oldRoot = PoseidonT3.hash([oldRoot, siblingNodes[i]]);\n\n                    unchecked {\n                        ++i;\n                    }\n                } else {\n                    self.sideNodes[level] = node;\n                }\n            }\n\n            unchecked {\n                ++level;\n            }\n        }\n\n        if (oldRoot != _root(self)) {\n            revert WrongSiblingNodes();\n        }\n\n        self.sideNodes[treeDepth] = node;\n\n        if (newLeaf != 0) {\n            self.leaves[newLeaf] = self.leaves[oldLeaf];\n        }\n\n        self.leaves[oldLeaf] = 0;\n\n        return node;\n    }\n\n    /// @dev Removes a leaf from the tree by setting its value to zero.\n    /// This function utilizes the update function to set the leaf's value\n    /// to zero and update the tree's state accordingly.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param oldLeaf: The value of the leaf to be removed.\n    /// @param siblingNodes: An array of sibling nodes required for updating the path to the root after removal.\n    /// @return The new root hash of the tree after the leaf has been removed.\n    function _remove(\n        LeanIMTData storage self,\n        uint256 oldLeaf,\n        uint256[] calldata siblingNodes\n    ) internal returns (uint256) {\n        return _update(self, oldLeaf, 0, siblingNodes);\n    }\n\n    /// @dev Checks if a leaf exists in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf to check for existence.\n    /// @return A boolean value indicating whether the leaf exists in the tree.\n    function _has(LeanIMTData storage self, uint256 leaf) internal view returns (bool) {\n        return self.leaves[leaf] != 0;\n    }\n\n    /// @dev Retrieves the index of a given leaf in the tree.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @param leaf: The value of the leaf whose index is to be found.\n    /// @return The index of the specified leaf within the tree. If the leaf is not present, the function\n    /// reverts with a custom error.\n    function _indexOf(LeanIMTData storage self, uint256 leaf) internal view returns (uint256) {\n        if (self.leaves[leaf] == 0) {\n            revert LeafDoesNotExist();\n        }\n\n        return self.leaves[leaf] - 1;\n    }\n\n    /// @dev Retrieves the root of the tree from the 'sideNodes' mapping using the\n    /// current tree depth.\n    /// @param self: A storage reference to the 'LeanIMTData' struct.\n    /// @return The root hash of the tree.\n    function _root(LeanIMTData storage self) internal view returns (uint256) {\n        return self.sideNodes[self.depth];\n    }\n}\n"
    },
    "contracts/base/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\n/// @dev Minimum supported tree depth.\nuint8 constant MIN_DEPTH = 1;\n\n/// @dev Maximum supported tree depth.\nuint8 constant MAX_DEPTH = 32;"
    },
    "contracts/base/SemaphoreGroups.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\nimport {ISemaphoreGroups} from \"../interfaces/ISemaphoreGroups.sol\";\nimport {InternalLeanIMT, LeanIMTData} from \"@zk-kit/lean-imt.sol/InternalLeanIMT.sol\";\n\n\n/// @title Semaphore groups contract.\n/// @dev This contract allows you to create groups, add, remove and update members.\n/// You can use getters to obtain informations about groups (root, depth, number of leaves).\nabstract contract SemaphoreGroups is ISemaphoreGroups {\n    using InternalLeanIMT for LeanIMTData;\n\n    /// @dev Gets a group id and returns its tree data.\n    /// The tree is an Incremental Merkle Tree\n    /// which is called Lean Incremental Merkle Tree.\n    mapping(uint256 => LeanIMTData) internal merkleTrees;\n\n    /// @dev Gets a group id and returns its admin.\n    /// The admin can be an Ethereum account or a smart contract.\n    mapping(uint256 => address) internal admins;\n\n    /// @dev Gets a group id and returns any pending admin.\n    /// The pending admin can be an Ethereum account or a smart contract.\n    mapping(uint256 => address) internal pendingAdmins;\n\n    /// @dev Checks if the group admin is the transaction sender.\n    /// @param groupId: Id of the group.\n    modifier onlyGroupAdmin(uint256 groupId) {\n        if (admins[groupId] != msg.sender) {\n            revert Semaphore__CallerIsNotTheGroupAdmin();\n        }\n        _;\n    }\n\n    /// @dev Checks if the group exists.\n    /// @param groupId: Id of the group.\n    modifier onlyExistingGroup(uint256 groupId) {\n        if (admins[groupId] == address(0)) {\n            revert Semaphore__GroupDoesNotExist();\n        }\n\n        _;\n    }\n\n    /// @dev Creates a new group. Only the admin will be able to add or remove members.\n    /// @param groupId: Id of the group.\n    /// @param admin: Admin of the group.\n    function _createGroup(uint256 groupId, address admin) internal virtual {\n        admins[groupId] = admin;\n\n        emit GroupCreated(groupId);\n        emit GroupAdminUpdated(groupId, address(0), admin);\n    }\n\n    /// @dev Updates the group admin. In order for the new admin to actually be updated,\n    /// they must explicitly accept by calling `_acceptGroupAdmin`.\n    /// @param groupId: Id of the group.\n    /// @param newAdmin: New admin of the group.\n    function _updateGroupAdmin(uint256 groupId, address newAdmin) internal virtual onlyGroupAdmin(groupId) {\n        pendingAdmins[groupId] = newAdmin;\n\n        emit GroupAdminPending(groupId, msg.sender, newAdmin);\n    }\n\n    /// @dev Allows the new admin to accept to update the group admin with their address.\n    /// @param groupId: Id of the group.\n    function _acceptGroupAdmin(uint256 groupId) internal virtual {\n        if (pendingAdmins[groupId] != msg.sender) {\n            revert Semaphore__CallerIsNotThePendingGroupAdmin();\n        }\n\n        address oldAdmin = admins[groupId];\n\n        admins[groupId] = msg.sender;\n\n        delete pendingAdmins[groupId];\n\n        emit GroupAdminUpdated(groupId, oldAdmin, msg.sender);\n    }\n\n    /// @dev Adds an identity commitment to an existing group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: New identity commitment.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _addMember(\n        uint256 groupId,\n        uint256 identityCommitment\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = getMerkleTreeSize(groupId);\n        merkleTreeRoot = merkleTrees[groupId]._insert(identityCommitment);\n\n        emit MemberAdded(groupId, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Adds new members to an existing group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitments: New identity commitments.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _addMembers(\n        uint256 groupId,\n        uint256[] calldata identityCommitments\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 startIndex = getMerkleTreeSize(groupId);\n        merkleTreeRoot = merkleTrees[groupId]._insertMany(identityCommitments);\n\n        emit MembersAdded(groupId, startIndex, identityCommitments, merkleTreeRoot);\n    }\n\n    /// @dev Updates an identity commitment of an existing group. A proof of membership is\n    /// needed to check if the node to be updated is part of the tree.\n    /// @param groupId: Id of the group.\n    /// @param oldIdentityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param merkleProofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _updateMember(\n        uint256 groupId,\n        uint256 oldIdentityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = merkleTrees[groupId]._indexOf(oldIdentityCommitment);\n        merkleTreeRoot = merkleTrees[groupId]._update(\n            oldIdentityCommitment,\n            newIdentityCommitment,\n            merkleProofSiblings\n        );\n\n        emit MemberUpdated(groupId, index, oldIdentityCommitment, newIdentityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev Removes an identity commitment from an existing group. A proof of membership is\n    /// needed to check if the node to be deleted is part of the tree.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param merkleProofSiblings: Array of the sibling nodes of the proof of membership.\n    /// @return merkleTreeRoot New root hash of the tree.\n    function _removeMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) internal virtual onlyGroupAdmin(groupId) returns (uint256 merkleTreeRoot) {\n        uint256 index = merkleTrees[groupId]._indexOf(identityCommitment);\n\n        merkleTreeRoot = merkleTrees[groupId]._remove(identityCommitment, merkleProofSiblings);\n\n        emit MemberRemoved(groupId, index, identityCommitment, merkleTreeRoot);\n    }\n\n    /// @dev See {ISemaphoreGroups-getGroupAdmin}.\n    function getGroupAdmin(uint256 groupId) public view virtual override returns (address) {\n        return admins[groupId];\n    }\n\n    /// @dev See {ISemaphoreGroups-hasMember}.\n    function hasMember(uint256 groupId, uint256 identityCommitment) public view virtual override returns (bool) {\n        return merkleTrees[groupId]._has(identityCommitment);\n    }\n\n    /// @dev See {ISemaphoreGroups-indexOf}.\n    function indexOf(uint256 groupId, uint256 identityCommitment) public view virtual override returns (uint256) {\n        return merkleTrees[groupId]._indexOf(identityCommitment);\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeRoot}.\n    function getMerkleTreeRoot(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId]._root();\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeDepth}.\n    function getMerkleTreeDepth(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId].depth;\n    }\n\n    /// @dev See {ISemaphoreGroups-getMerkleTreeSize}.\n    function getMerkleTreeSize(uint256 groupId) public view virtual override returns (uint256) {\n        return merkleTrees[groupId].size;\n    }\n}"
    },
    "contracts/base/SemaphoreVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Part of this file was generated with [snarkJS](https://github.com/iden3/snarkjs).\n\npragma solidity >=0.8.23 <0.9.0;\n\nimport {MAX_DEPTH} from \"./Constants.sol\";\nimport {SemaphoreVerifierKeyPts} from \"./SemaphoreVerifierKeyPts.sol\";\n\ncontract SemaphoreVerifier {\n    // Scalar field size\n    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax = 16428432848801857252194528405604668803277877773566238944394625302971855135431;\n    uint256 constant alphay = 16846502678714586896801519656441059708016666274385668027902869494772365009666;\n    uint256 constant betax1 = 3182164110458002340215786955198810119980427837186618912744689678939861918171;\n    uint256 constant betax2 = 16348171800823588416173124589066524623406261996681292662100840445103873053252;\n    uint256 constant betay1 = 4920802715848186258981584729175884379674325733638798907835771393452862684714;\n    uint256 constant betay2 = 19687132236965066906216944365591810874384658708175106803089633851114028275753;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    constructor() {\n        SemaphoreVerifierKeyPts.checkInvariant(MAX_DEPTH);\n    }\n\n    function verifyProof(\n        uint[2] calldata _pA,\n        uint[2][2] calldata _pB,\n        uint[2] calldata _pC,\n        uint[4] calldata _pubSignals,\n        uint merkleTreeDepth\n    ) external view returns (bool) {\n        uint[14] memory _vkPoints = SemaphoreVerifierKeyPts.getPts(merkleTreeDepth);\n\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, r)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                // ecMul gas cost is fixed at 6000. Add 33.3% gas for safety buffer.\n                // Last checked in 2024 Oct, evm codename Cancun\n                // ref: https://www.evm.codes/precompiled?fork=cancun#0x07\n                success := staticcall(8000, 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                // ecAdd gas cost is fixed at 150. Add 33.3% gas for safety buffer.\n                // Last checked in 2024 Oct, evm codename Cancun\n                // ref: https://www.evm.codes/precompiled?fork=cancun#0x06\n                success := staticcall(200, 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem, vkPoints) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, mload(add(vkPoints, 128)))\n                mstore(add(_pVk, 32), mload(add(vkPoints, 160)))\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, mload(add(vkPoints, 192)), mload(add(vkPoints, 224)), calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 256)),\n                    mload(add(vkPoints, 288)),\n                    calldataload(add(pubSignals, 32))\n                )\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 320)),\n                    mload(add(vkPoints, 352)),\n                    calldataload(add(pubSignals, 64))\n                )\n\n                g1_mulAccC(\n                    _pVk,\n                    mload(add(vkPoints, 384)),\n                    mload(add(vkPoints, 416)),\n                    calldataload(add(pubSignals, 96))\n                )\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), mload(vkPoints))\n                mstore(add(_pPairing, 672), mload(add(vkPoints, 32)))\n                mstore(add(_pPairing, 704), mload(add(vkPoints, 64)))\n                mstore(add(_pPairing, 736), mload(add(vkPoints, 96)))\n\n                // ecPairing gas cost at 181000 given 768 bytes input. Add 33.3% gas for safety buffer.\n                // Last checked in 2024 Oct, evm codename Cancun\n                // ref: https://www.evm.codes/precompiled?fork=cancun#0x08\n                let success := staticcall(241333, 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem, _vkPoints)\n\n            mstore(0, isValid)\n            return(0, 0x20)\n        }\n    }\n}"
    },
    "contracts/base/SemaphoreVerifierKeyPts.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Part of this file was generated with [snarkJS](https://github.com/iden3/snarkjs).\npragma solidity >=0.8.23 <0.9.0;\n\nlibrary SemaphoreVerifierKeyPts {\n    error Semaphore__VKPtBytesMaxDepthInvariantViolated(uint256 actual, uint256 expected);\n\n    // Verification Key points.\n    // These values are taken from the verification key json file generated with snarkjs.\n    // It allows to use the same verifier to verify proofs for all the tree depths supported by Semaphore.\n    uint256 private constant SET_SIZE = 14;\n    bytes private constant VK_POINT_BYTES =\n        hex\"15fd0f19bff5521edae5f6d895f4730c241ccc3d415eef6c9485d21914188c1d\"\n        hex\"2446d537b3dbf1feba740b7657dc394b17e890cc1db8c77a1df7ddbf00c956cc\"\n        hex\"0e8e971b94bc8945665a5a61d013e62406abdad7c304284ab3981bb120ddf221\"\n        hex\"2bc9b3a8075e8affb419233bae1329c8b5a36dd5849d426b61896d79e5ace369\"\n        hex\"2fad2a9783fc2ba49001eacd3a33e34c302753636d3c46357636dae6c8b2024b\"\n        hex\"19c6002888dcd3e33699c10634a806d2aae224c3d7e59cec5a9b8719b066d264\"\n        hex\"0c3bc3c927533404b7618b19082e24eb2ca334e7bf9dceb958bd3551e9fe7f57\"\n        hex\"270e9bcc58594f6192a2b99d2846f622de39b5937b2a7323cc45e25fcb2093d0\"\n        hex\"1e7d1a66aaffd026340c02261fd998650c044a8b0c7fd711e04213a1cd2cd351\"\n        hex\"2424444f3b3621df8c36b258f3554a9c5e2a21a5331717c8aba346c7ac63c976\"\n        hex\"16e036c1a88f983c82227849b01847266a1175919ac332c27799549ce18d36ee\"\n        hex\"0b0ca3b0483c8e42c91944242fc36b40ca910518f9d85a25be8e4a7ef43663ad\"\n        hex\"110cf5e0d819a05a811f7a0c166628530ba6f6d353e8e6a433c064d6fadf060c\"\n        hex\"19bce756e115841dd94ff44541d5ad78130187d67f3c560c2a590bd093765709\"\n        hex\"09257a78bf2bdbaec4a20392ebaef666111a0013e0d145e3b8538bf21c631b78\"\n        hex\"054754fba6cbe53da1b0e9c8e6694c94e5c5784962cd792416d2e2a69c666d20\"\n        hex\"1afd103f745dc8bd51a5433a7ac8419f1dedaafbcadd19048e9009d4c6241613\"\n        hex\"245cd94a309bfb79ae8f5255803fc1fbdb80bb78ac6d5f68dd031a464a87ebf4\"\n        hex\"14faebe5560369ec0b8807a88ecfa006f7f9795caf1bfcfe261555534cf4e78d\"\n        hex\"0c962615261ca9c1f65cd755e00bc013abf1533a12e81b80b32fc41b0d1fa86d\"\n        hex\"2792793df783c78305175c60e000c53fd96ee07ceb78e470a6c64a1b477c5534\"\n        hex\"2096d8bc28b6870f36fc685e6509823ed594339011cb6dde0e8f8d7cc1cc582e\"\n        hex\"109542c42e7879d5f2509059905ece1bd8860e7c820343aa1b30461df91eae95\"\n        hex\"1eea6862ae37a2a4392c5801737849adb507f0a3137699241517a3f1ebbb3a48\"\n        hex\"093d3e06748b6704617f4cffeeab1a9c5b788923f7fe09a498749dd9ac9f3253\"\n        hex\"2e5f917fa4593965b59fbd36e7644390ba01391b8379a4a204c1c29fd1d17cde\"\n        hex\"2a0dccfc2e6d40de5187062a63a944a907d0d7bb6eb30533a3454057778ed3af\"\n        hex\"1b8f89159c77020c893f3cb7a2a4cc3085dafdab413391192963d2d6f8a71b7d\"\n        hex\"241b04a42762b5922f9e96652279d739459c63ba99921d36047868be961392e4\"\n        hex\"1f9a885deeb4ea645ceddc1b496d41a8b765b09c9fa5dd267644335f50b78827\"\n        hex\"0903ca28b792a69f59d7499ed7e261840c1e20951bf0036cd34057859ea07c98\"\n        hex\"0cf286f5af05fa35173dcabd94e3c7fb591b74607d58c397469cf09759e89b56\"\n        hex\"1a465001f19b05dc38a491b248c97ec7920c03da29e69d805df6dae9ad29c6b8\"\n        hex\"0ed2c6a0818f6e04bd3aa8e1a17b0d67c6815feeb8bfe9b3a575bde437ab7114\"\n        hex\"1cb929c4998d91a32baae52fc164831ff6bd12474cd8c91189b69f1e8cdb7164\"\n        hex\"0c5be902277c48337d1db6b1fb81c89e8689cb10b7ee6af8b9fc5975a730f6eb\"\n        hex\"2dd837a46f2ba2ee8ea9442a9eebd87ed57f594f044c7860b39595eae6ce4d0e\"\n        hex\"119bc8b722e52ff60236302b2e6f4a139f15e63aa0641ae765f3e71c32fb759d\"\n        hex\"25214f618153620b583fbd2abc2eef9a26789f3b5296e90551877a37d362dc95\"\n        hex\"013c611347b3d133ed9045be2c36f8689a0120c4078d12d8cd28c006bc61dda2\"\n        hex\"2f0a9559eca7cc75db51c369b05e74c952d5a8ae39b06ed01c8698f4d74d58dc\"\n        hex\"0fee282026bc113cc251580beab7bfbddf2209056fce08c4e356b1a06f1bc944\"\n        hex\"14393956732c8d80c3f60ae0a275b3968c22c40e9054b3ad662671f4326f208e\"\n        hex\"1ce66ceaedec3b13ac33cf1dacc63e7e68e3e7fdee08e91a54075cc0758a805a\"\n        hex\"1abc1b6362a1a276f723f806d4a51d3b7ab592ac8f39e198cb5efcceaf0e48c1\"\n        hex\"23f70ead154fd51f42a3de0ac2b61621f01a8b0899f46d2d9da1a8d620b88e98\"\n        hex\"28358bc8e9b03c31481e07909d86cc8386494aa0c6b1fddb6e83911200d2d5bf\"\n        hex\"21309d93ca7e97b55d43c9396f92716ff1ad99b73dc929c566de6c6c721bd048\"\n        hex\"08666e4182c159d4cfd305e1f6f5cfe4ce9243ab5388c2a5a0ab74b600e4bd5e\"\n        hex\"28cfb007611bda022f417d399841a00e543b14076672113b21e9bdf4942eb3fc\"\n        hex\"1281dff49430dbc9d0748814312f5356a1024539516ae19e8b6eb6379421cc83\"\n        hex\"243dc2b640abc1728422276ba4ad24cab39fc7d1ef6cf3d82fe82c9f89efaa7b\"\n        hex\"005cff4d9542e3250c36bf32561e274f8fa928dd3a8d11f4f76c36a4cdeb5e64\"\n        hex\"20b886f89543b54f0403091d51cd88895fbd55aea86d19db8b89cfd55255f803\"\n        hex\"0c0aa8002fb14fb9b4feda737c210d4289d62a014e4bdbf708ad21b53ef62d96\"\n        hex\"25e79b70d1ee02eb3f6c25bfaa7b9a4e1566b0fa70c6c0ca072191897838a360\"\n        hex\"27218c7dc6af590ab65620d6f31dd4cbdf1eb86058151118bbdb80b8d96d0d80\"\n        hex\"053653ac15a867afa2931d75116318a810d5512d871b71f4654c86acabde8c91\"\n        hex\"1c48420d5581f37e60b15a6dfe652b9ce46e2de3414d252b18df5b1b8df2a818\"\n        hex\"21fbada5ab40ee0640b13756b26a7fcfeb5f81de884fbb889f3ccba3fd64cce7\"\n        hex\"0d6670f5a24582a747e1d1ae1e0e8da63d7d202210d96dd5078fa58eccd43e36\"\n        hex\"1fe26476a17c1dda8d2d1b630ccd263ecd5644529afc3e2973f6961ff3f87126\"\n        hex\"27464f05a8ebb85e8e465599614ced7bec41fcda74ec9f51ae39c392672bc724\"\n        hex\"2ab9a6d1c669a478ceb584e3bc6e1635e3202ec53cbb6f3cc42bbfd7659607c0\"\n        hex\"0dd63e17922e2e955c38d47347fd269336d27cb9b9c7a3218c3808507bbc994d\"\n        hex\"19593a3350d5604598530c93362e2836f90f7daa675f73b40bc04d67b0625e3d\"\n        hex\"1682034112be41166846a800dec3f04dc45f7878bd2c5493e443f44efc5c08af\"\n        hex\"0828e223ee37c2d4dfa133c8df747c3ddd415da67e911f2f5cb609a58df64bd0\"\n        hex\"127bfd549e5e8dcf4b22291715f2ad5668cd6c711c2a39c3ffebe93243df40b0\"\n        hex\"0dc2c61595d602f4f7b03af6a919263956b5943cb3f5f890bde70de733623387\"\n        hex\"1eecc3f4d0cf71749bb70475ee20a3d479719fcb7c7bea429059f6c1d18dd57e\"\n        hex\"2d94c63811c0f21889beeecc4d7797f0fa87f0cd40fb84ac72f5537942b5bd7a\"\n        hex\"07573806d926b6e92313c06ba464ac035746e0dc96b3d40db4020f72dbbf7153\"\n        hex\"06fdd2c03d7f271f2969d465c7e86763751e29fa622a2715694c534b5e171b25\"\n        hex\"19546a1616aca8f207e875ebf37977f96c1dfa32ddf16d7eaded9047ab15142f\"\n        hex\"1953bcaad2e145cb2a759cdd65eb7cf493b281b71b0faa6010e30a38b5127519\"\n        hex\"2fdb1ef3113503a9db688b32a0b79f3a8125d7967b3962373fb886332a135f77\"\n        hex\"06d774b685f236c190a046ec7fc6147a84260794c543230c4d3f90cc091d0e60\"\n        hex\"2cb5b76f44713c49cc24cb3e1715ba081787296b94dbe25ab57742ebf6553df4\"\n        hex\"05159d91bd6a0a9c639b0cc27cc39dae457f45225c4bb554264af8e229a52524\"\n        hex\"115001b9e8d8b1463cd86a016c3610f87fc2a10f63bdfcc00cfa99353a4c1a52\"\n        hex\"125537cf6072615205c38045b8ad31d155bdd8acf80c7dc627a7506e642a177c\"\n        hex\"2e83916c6303325ed9513361098830271102ac5dbf285e2645915eeda77a5693\"\n        hex\"1ce67dd1edcaac1b03358eb6b2ad3780bd1cd201b91d4bb2e603e01279351fd1\"\n        hex\"26e90bd7b6f903b9e517a0f77a7e4048033cb873b1da8cf190080e75cd1dfd6b\"\n        hex\"1cf426585573250eb3432a5e80fc194c307c58c814ac37bde84125a5aef222a7\"\n        hex\"10fe5c50f8fe71b1fb44251e5dcc90bd0d64844451329dcb49e241585406ef8b\"\n        hex\"0c273841cf7228666b689b24a7022bc402815f77f71b43c1862f64853b6a47ca\"\n        hex\"1255c43af69be48744c759de67f363030b809ea5be5de707545d1f29dbfcd272\"\n        hex\"110b2f7ac7d7b3f94893762fca13700b74cec691bc57d216ba04e992bd0dc947\"\n        hex\"0652c5b2ba7b972dd68bf8c271556b57ad4521c067a072d75ee09268562cea9d\"\n        hex\"1e6db4b3e0185f2add0d49d60e16168c2f3ea91e2cb05678f2c9d9abe232b340\"\n        hex\"0a96b6eed42e7041c98baa152253971225378ac4cd9589c80cea28c06b570678\"\n        hex\"2650ef83382c54ccfabafaec8096c519ab5670c7d4dea2535c64db2b7dfcb553\"\n        hex\"1664dbfaf0f45d6ce2782683f87e6c9e9b7176f08511ac1663869adf9337eef0\"\n        hex\"212ae8907761700bdea4b480f20f788dd08ca4126dcf4ea462e890f302634476\"\n        hex\"0e50a74cf13a9f5c3eac33a38c6f9e8d3c2638bee309a4180afd6097c52766e4\"\n        hex\"1377037809e690222f9afca6e1ee39ba95846bbe912379a938f6ffcb493f5cbc\"\n        hex\"094a2af179f583a4155dc7f2b191c036df4330c0eb75e1e70d2487431bb4b51f\"\n        hex\"2b1bc223925afd7f4f7cdd038d39183e1364d1665dcb17cfc2e30da2edbda339\"\n        hex\"019a6052e1c5cf66ec396956467e791a97506bb3291d1a149d863d9cc25d660d\"\n        hex\"1f709b744826f4ce03d2ae0eb2a86613bc33b2bbed5e9ac6198f7e8df1afa8b2\"\n        hex\"10cee567471a2b01cfa286f3095713ffe5855c06f17158e33e9ebfdc1c792a88\"\n        hex\"239ea34b3e8a5d1d26599fcf453537fb16a91f9520317a01c7de1bb5a768d725\"\n        hex\"09b3a1bb0c0be55876c4b91957b7e86412654bf272b7b9c52f2217e9713c7dcc\"\n        hex\"2cea70065cb1bf0b68c86a3592a5134384be8b10de004c31233b783577694dc6\"\n        hex\"13aa1864f9d5017a46cb107be441f821a85315b79f39968d6407f343a2c61998\"\n        hex\"0005f278bae49a9a15a54132c50388e69f4211ceddee99195f07736b502fadee\"\n        hex\"0302a786d79c25a2be297edd39eaee413dc553146ff7d83bbbb8bc71447b6605\"\n        hex\"2eaf36a4dae40401cfa571b55ad8b5fbced37e67860085bc6afc5412d809ce8a\"\n        hex\"166d04b67debdf8e674bd6074bf67031d3b4c558647dc4a3c5443eba23086683\"\n        hex\"232f97fa7f391323e066175feb3572aed60c343c3e3c11ed309c00ffa29cdd37\"\n        hex\"08f1791a609f8714b38f03cfeeb1a149adf524a946a397191b0986869458bb8a\"\n        hex\"20e9ad3d16db1563e84154a169db5e81d0117d4914800772d4bf624317e32b36\"\n        hex\"17a525ede8962fdfd05af9ba5ef109bd2f5de02524454aa25c696b7c6fb0757d\"\n        hex\"0d71a275a14cfaa4f987cf2d2552add13d13fc7141c544a0ab457103e4b2d502\"\n        hex\"1ff842cd59778fb6c75d197511f3158ecac8fafd21db5fa652725be434580ff9\"\n        hex\"21095e6eefdda8f7648172826e435e08a93109b1f040d88ec1b01ce3e2dfa592\"\n        hex\"02746d05612699c335d4031f388561fa2c6b3a4c224df74140c58c5dd7391459\"\n        hex\"182427fdf7ec0b8c5a7003e3ae6c19d8da47804a75d62ba4a1f8ce1835d7eb66\"\n        hex\"0dcfad648630a6037241a73af244b1612eb375d852712a10182e1339d176471f\"\n        hex\"24611b2e7aad1a1fba1f1eb3193a87a0261e98dbe77fb30944edc6ef5726acda\"\n        hex\"2df51df9c66f51695783648873bc167bc8199afdcf98a6a39dfc14933634cc25\"\n        hex\"00ba85a4d757b2bb24f2686c8fc2b20d23f68ecc5bbd889d70db8222f9c94eeb\"\n        hex\"2a615fc377bd707e1d297df70f60076d184ea30144439d2a02827ccc4b74d6d5\"\n        hex\"083ff5f9b4474040e1db95e7dd4ac08bc49f0df5e04b1601e531087a66e1a9a0\"\n        hex\"300192ff2b9358b371328362eab85f10b3b256562986b0222f90fde6285b2031\"\n        hex\"2b9b6d2f72c215474b76c58be1bc8113aed21efc4bfeb76d432fadd1a143ae55\"\n        hex\"1afc92793b1e3c7bc0fff4d51b34c751d6fd4f0b684fd36a5eb31f2e7d59bd08\"\n        hex\"27a4788df73ad8b0a3db6dd0366131faff0cf443fdbe689b1811275524fe4f5b\"\n        hex\"26e306f7f4400a8b466a46f73b1bb30628e8f53ae183179a89ea09bcab1abe8c\"\n        hex\"1903a292e81db108e9af23cd1c7249087803195ef86af9d7aef43f671bbe28d5\"\n        hex\"05c92b5167e06202018a4b1c482dde448604793a2b6d734c3a59f599b457794f\"\n        hex\"109890a7f2fcb50131c7e510faf117da23344b6e50403670b103e8b1b0fea27f\"\n        hex\"1fb6977c76473f7a1d148b69a5526768ac7032ce91f0e138973b3e4d30745fdf\"\n        hex\"22846c8fc4704252020b4a141726ef713f5eda605ded818ee69d101490d5a8b6\"\n        hex\"079b1bc515838f1ad835d87623adef3b1673ca9735ab72d8fc938e206a524e58\"\n        hex\"20d47a675b313cd4b857527f3e6ddd2b5646e5fd9f206aad5bcfaae6cb0958e6\"\n        hex\"064e79c61f6d53a00688e7f217a0c8579ba3daf9d4df5dec16f013a124413f15\"\n        hex\"2383c6f75c1a392e6e1375277f1130c2274d8668773addb783207cf58cf4c0b6\"\n        hex\"0f693e2f20b43eac0691b48a00fadf42143af8e21b080d41d1e71c8a02142da7\"\n        hex\"264fba8810c9e1c00b512aab1d355bd7ccab52089768376d8a925cf1c3f927a1\"\n        hex\"01c6986291edd61bf9888d6bbc0d0f802bbc4186a811b8107fcf306a557f0af6\"\n        hex\"26cdd05df967801d477b1c344754c15f7a30b0bd75bb98985a0c2fff9ec80c06\"\n        hex\"0c5e61cdfabe2eb8188f70cac4d7b7cdeed9b964792d7dfb6fc0b228a7270e54\"\n        hex\"2a586a34c5b50461b05614cbf3ce228c130522513793ec263f9afa96e23f4e5a\"\n        hex\"25ccf30168e9ef4fd1cb902c95ca8d67a13580dd07994094b221708f8c7d6797\"\n        hex\"107dfa97fd9047fae9cf80f48b206884949b324e4ab03212f3298c4818987696\"\n        hex\"1cff7a1fcb4f40c410ceb353cb8ab907a0f6b2821dbf82766ec762967ba23944\"\n        hex\"20b8533e0ab744d5db86e30a3e73a80bf621a2b5d8555b0fc416389d5cf53265\"\n        hex\"0c9d9b203b72e7887fbc30ac7978146860ea4aa1ff0d96dca2c65666304cacbb\"\n        hex\"1b84d4afa11231f3a4a3c62a0029a39f5ea31d907a92070494990427e7ca6f88\"\n        hex\"14107581ede64e20dce54fffbc6443cec3ca1cb0054c5142187cd21bcb166b79\"\n        hex\"16737e84151e0282876e43177c3830524e3b6ac2eab243a067de3319f8d0b8b4\"\n        hex\"2037cd61979b667fb80288588d2b095f0c4c34312d7c75a074beda537909cfa1\"\n        hex\"04afc04e3f13c2d80fcfa1aa6e946499406ce541ca84527b75dd29881c09e6a1\"\n        hex\"20a42ab93cae3bb2a7ac65c4952fcafa2b58f3d3c3b292246e292dc1d10ead44\"\n        hex\"2294e0ac633d4e59ac74082946c67653dfd3b17220d05953f214328d778d6256\"\n        hex\"019e150e3d992f5175dd609d7b7468a978428a5bbf291b77f900d1c682cba1bf\"\n        hex\"2c04f3db93c0870db5a439e9ff0f2ac65d19edda31f6bf64e9f827516b3f68e7\"\n        hex\"2e6c4ce5c33d2f1d00d4c7c691e5d39dfea1c0eb590de777e5fe64365545646f\"\n        hex\"01879179e76aed29e2392a6df0ac85ea6a285e0d3a1112e8593c23c3e33df5a2\"\n        hex\"086975bbb71f10a74a76f43bcb0035481860c6478f23fe914df449b50e56c492\"\n        hex\"2c6feb5c47ad32b1054c98e31df1659881f884939536961bedeff8cfbb6e1282\"\n        hex\"0549855c647dcdf03d05c6a490d5541098d6d83bae7da0112a822e0abcece250\"\n        hex\"20f9c4e3fcfa0d305a923e4fb0d9ef583cb141debfeb931c909ef1d4fdf6eac9\"\n        hex\"05a3b3663e889c49eb5920e769bbfe9f9dfc905554300bb2b4285c6a5889b274\"\n        hex\"1f9e528d112bd8a059eaa510cbd9a7458598d27775bcf6d851a0d359ebb81dec\"\n        hex\"15608ad6b67162915e05d6af1ba4b32eb4693f775ffc0a66485c3e5617dd37e0\"\n        hex\"1bd2e26efa4fb0a842e03142af573fa9c16623542451b3e4e0af1970cd7e2b0a\"\n        hex\"2b417cad2430c3018499a10488fedf9e5399ce6cf93819469c802bed6386d7b9\"\n        hex\"230d363d8bacdd978d08dfbc44f1c3bbd3b2bc1e2aabc5c3759db87f8f895eab\"\n        hex\"2f83002ed31eaca2531766a09552eb1667a9419192ca335b08d93693e5584abc\"\n        hex\"0feccdb53345bdae7349c42b119570c762f1f5497eaf898e4ba2d378d9d8d20d\"\n        hex\"18d01d38cb6ac78d93961c1ecbfaadd4b0cf999b972ce4900cee9faacdf8298a\"\n        hex\"1f31cefa55f5f930d149b63b7a33e385a688aa8a4ff3ff8d88e501dd7466b475\"\n        hex\"1a02607dc91fd27ebb066b51f8dca8d64dec062d3f8ea6a3e2859d139c17e9f2\"\n        hex\"25bce5f60cf5c72fe58b511983c067ecab88071786feb4f6cf83e1b5ac35878e\"\n        hex\"199ea7d2467ea66b53853f7ba20a91bb44a4a5f621404375051cbac31997a366\"\n        hex\"1641e4ce35beb44e3d00fd9b7a3bd47e118fcb21c62281b148dfe4097c147e11\"\n        hex\"227cf6075dbc7987ebce58711ed50e2b6a94c1478db414a834345cb2b5c21cb5\"\n        hex\"252bdf93e4bc24d639e1ebd80550001fa9aa1e7d6abcba326c2b2feade8fd8d9\"\n        hex\"073103523d7b0ce327314d3474aa6b77824a75862d0cbaa5af6e1d2cead16b9f\"\n        hex\"050f7090cc1ece4b5217a0419fe3066d81ea2e19dc6c5410c770740c16875066\"\n        hex\"2a4801a2483187073a17cd04890165ff19b24180cc8ed16870cfe0f2ccd82183\"\n        hex\"24e27258b0e61cf13892a8b7abb13e0cc19faff40bbdd680a389f4918f63d9e2\"\n        hex\"0f03cbd30fb82d7807479517b4e29b3da4950b96a023a331e52c721c66f5e229\"\n        hex\"2bb6d910684eb13c86f172f66f59a093f8a002333c8767bd594ceb63e9c6a2c4\"\n        hex\"1f32b4847858f72bc734df639c032604ae71ff65afbbdcf42acc7ec195f3a39c\"\n        hex\"2a0f1adf6230de3995bce023cdfc6af1e85d9121f84de4a34b9c7fc4ff920c76\"\n        hex\"17fa977e81dac861e637d8d9e4636487afa55618f35f7455af8321f8d6d50d6e\"\n        hex\"09f9221e154ad381a5b58d1c8771be1f47f3aae8a9769151cd84c1434fabcb9b\"\n        hex\"0ea204dbfbd3e404128c8252d607169ef5305bb12a59e44ac4be9147055a6f20\"\n        hex\"0d2547a25e17e027bda4423048f3c6c595d6f83124767da34e0e4b96c26f5c94\"\n        hex\"0cbd5f2d0cea7678b80aeed4b0de78259c86a2c207dc0f28fcbe22a1252e5d3c\"\n        hex\"1a9b6c59c30e6d1e3c5efae27acc27e9b7bd23af3dd7963a0aa8361b4df2f243\"\n        hex\"0cc761b549af62069ba3e0fa7ce6c75c9f6defed91e8f3314c4b1ed7a5e0c83c\"\n        hex\"30264e78dcb1adb0d7503f80507ed4bf90271624d70dfca454d1990a2f755988\"\n        hex\"28d55e9071501cbb4ae790279f996622466c1c9f131d667e8baf7bdbd5d9a455\"\n        hex\"11ff42ce9d42c89d7687d469625b18c59b883833298af76480817907af2294a7\"\n        hex\"04645153c868372f37d106c5c4bfba4e2f73309d53390894a6b2338810da3f0d\"\n        hex\"103e33717f00caddc108323574de85c6887720561ad0c9946bc510bd3954ad4d\"\n        hex\"264461fb0d2dea03b815969e1b2bbeb995d30f774fa49411323d20ea4f4f1652\"\n        hex\"161a104ad60c9b35ef38783a9f951bd969e107846affc11754708b694168ab99\"\n        hex\"22ae691abdea5ac8f12f90a1a147b5ac63088f4c3de32e81d38e79a93612d9f9\"\n        hex\"1286d17dc13dcabf49975e2a37743d997ebc56d11b71c2e430890eb9fb7c7d3b\"\n        hex\"1411153db07129358c9ebfd849d1a12de7ff39ec458b616a3e6885bee7114f7a\"\n        hex\"0a98b996681afa7f3a7ea25fc6d9f2b48af7c5d8c8db0d55892bb64461752f93\"\n        hex\"2838a60cc9aa8717f4308e6074996b7b71f077a1fd9d8353af5c086aebed16b7\"\n        hex\"0ca941047448572c947a8308b479f74524a74c384d926e4be36e8068bc635df6\"\n        hex\"10b06f989dfd1d445b6c4bbc386c1915d9c6775df42fd040826a8a95deb11561\"\n        hex\"234bc8dba2ee31ad5b1dddb6946dbf1f2d9a2f7d71bbb45d94d7f9ff47afe936\"\n        hex\"03b28511d097183cceb1250dd00dd4501789b25bb547cfe66eed09bec1871c59\"\n        hex\"2d06d2e4acc30f60e54c1bec9442b8aa70137c37b798d2dd8dbeeea514f7907b\"\n        hex\"08037905d11e86a5a9d3b03cbe3094e9468d3fb3c1a20738c08877269a69147e\"\n        hex\"1f79d21604dcfb2ca75a44e38aa87cf8f3f56f639c8501d336f2e72a87486695\"\n        hex\"20898e9f4eab7b0f918e10b9fc35a024f4d0578c0e46463cbf360606fa47ade4\"\n        hex\"09b99372d699342f4c7e3c807a133ee3be1c92422cf2f0e5492136e815061041\"\n        hex\"142ad77d8e80c9a778bc04e8a62e550908c55974693603d8670bf9205553bf7f\"\n        hex\"22f3a31aa3f9f3c040048df27710a8e485049abfabb71b51cbbd87126e83cf24\"\n        hex\"03459743b0ca82a0801415ea160bad9d326888db19ea8b86bbcfacb48ac3c412\"\n        hex\"0491b8939d07f0074c444ee02f79917f5ded067d7e0529b0437b71fe6355170e\"\n        hex\"2bcf73774c5976acfbc99b1116384b11930bca6187dac5e662bb9250487f0845\"\n        hex\"244615cb6c1b8f74aad86d9f900ceff74ee731a9dffebc26096a1e6a772680f7\"\n        hex\"23a077e52b600cefbef77eb273ea0d5d2d7b18099b4832772b56c6e822df0794\"\n        hex\"227f9d7399bc220483caa969a8892901b894de900a1a20da29328343ce7cea1a\"\n        hex\"1679302001981320168e8d8e921756f2ec22d21fd130d719eceaae1b19354bae\"\n        hex\"118d5af95d648cf620249c405d77c7743089d9d262e29860cab3c292def4ffe4\"\n        hex\"2284c84a005818061688fe45ff37d6fa24b4f99587fc5e9a1208b3edf4d060d0\"\n        hex\"0cfc0f918b739604150598b74b981255a70d772a67f23f51c34212958b45a035\"\n        hex\"2537c964c421601b62787e6eb7307b99a9d6eefd0286f927fb25f22e7e9eaf95\"\n        hex\"1e30310e4606c228e2f5c3df3eea02457bb4777af8546fb61bb1434221d99884\"\n        hex\"0f5caab9c8ada0b5a094dd9129eea5421c1320ae7a666b56c960be0dd4c1eddc\"\n        hex\"1dd1def16e2a0ffc68a449be9d160b00ca35599e7ad7cd1afdae000cbc76dea8\"\n        hex\"2ae0eb79a34fa9a3c73bd9f1eca8731aea913ca7d138958a32c09c1c521df6a2\"\n        hex\"28ff689e68fdc639c190119604c98a1845806a317af901568ec8dc47593915f1\"\n        hex\"1bd5a5860f93500e39351520da5f095ec6557f54e0d5628fe9cf1a20d52c426c\"\n        hex\"021f0968bcefd07ac634d7e6e02d45eb6afa85d28b307f5d2e3f2cd6d744fb44\"\n        hex\"1c0c5c153df6045c88bdc5d09dfc813cf8546d7344c70d194fcfd29f92f4b696\"\n        hex\"1ca6c68abb475da1475efc1300855db5fd7374a5b92b4f90f49952a05aaf92ca\"\n        hex\"2bda409f3445270ea3a6d128b46a5cd5cb245b5339a66fdf814f2b83f4c123d3\"\n        hex\"05a71c398107a0314772fcd210e0c1d3ea35d99444a378e1213a9e10e6768daf\"\n        hex\"11fdba29cb4c24bb0e770eb1d4e5c23d9a51a3cc86c7d41b35312fc5c943f965\"\n        hex\"05f0e7da79e615a61755ed4526892b42ce1e80b5b027537bf53f0b536d4bbc0b\"\n        hex\"1eb2f81535a276e50897a2baf3bbfd981468b91fccfbec6cec8bdc988f002350\"\n        hex\"15d6ce1db45302f8e286e96e26e4f64ef5534ab8a55a9ffe215f896d7ae7bffd\"\n        hex\"1315122998316a3bb389bfa1146d940d7e2718edb570f12cdcc57377f8ca2378\"\n        hex\"023f10e9f89b3f0a2c44497c8a7b705786220397dce0083335027a9ce9839f60\"\n        hex\"234a05bd730e143866824a0e9b7672adaa64b679dfdd86c8e54fb2df83438c20\"\n        hex\"2d23c1a987db7a304a2d504e5c4573592c119fcda1ccfe5a07d5643c4a9c0633\"\n        hex\"029b04e14de53677bf90dc7badde802e588fdca2b9081ba20f4712e662c12adb\"\n        hex\"263f5e4fd893704c5f229914cd8f37bdc3f9409e617507850604f2f59d390fe6\"\n        hex\"21c9780ceccc597c37b49b8742654a6d34f71cb32d1555e72c06004d06f6f5b2\"\n        hex\"011c1683c09a02f63b38549eb958115f326fdc2bf0aa81247acfb1cc8554493f\"\n        hex\"26430030fb83d387a990d785f38ef4669b2fc53ff8ebc2537009c8648232996f\"\n        hex\"1247fe42d335f9252cf1f570316ae986b553044b0c81e635f764ab9915e11294\"\n        hex\"1386af604cbb138efe8dda480060758e274bdf502d2bcf9b5210e31798b08adc\"\n        hex\"06adec496d6a730820969cfbf60ab07a2a8f7cfcfcf2020d4cac60d127fefafe\"\n        hex\"06c39f25af1748848c37d1eabbd6a84a9a735afce06a5922e8a80af1bfc7eb5f\"\n        hex\"213dbb816f4ac87aa15aef8541b1abe3fb4d11d8b0b082989a0fff41ad9bdb2c\"\n        hex\"1e41cbe348a7f3d5e2408d19b26817183d1f6d3b51f27a915274efd9598ff18a\"\n        hex\"1568510b7bb366f4387eea8fd2b20fdd95fb6a612958b5c25262c32ab3eed75c\"\n        hex\"08521336bddf41556b79cee9b90b0c1cb4d36245c25a7f8b248567fb4248313d\"\n        hex\"2d0893b893b14eaf3aed6820ae987b88da0cba5dad3c5b267c9012405514767b\"\n        hex\"01540a25e982ae7e1c98d06b14cc56241ab9b09543440957bfbeb9c384a74b65\"\n        hex\"1744fc2b7ca4e19a45031fc838edb3805964d6533a4a5583ac57d9a9f6e6da65\"\n        hex\"1230a42b5aa82168743e9817923ea3ebd1d3a55ef1bd91a89eacc55663a02640\"\n        hex\"1673e455967762f96f57b413424631198e09e7bb1bb06844068fe44f307a8d59\"\n        hex\"061d9c5b1f377adc54722ccaf3601332ebc07660fec4d89b5c8213031f0aa8b7\"\n        hex\"2e92f89b6bd8472ef679fa5d617805180e6e0605423cac37fc15f281939770a7\"\n        hex\"2d3c9778d5cb3ab0bfe4b296e2ed90ed19619b8b353c1043b40e03b568a049a4\"\n        hex\"17276cb455cc5d461db37b0b4f6b34f1bb429a76968726205617095e1d39b92d\"\n        hex\"09dae1c6d2e4114c5439c81baa28594cc0ab76e7f32c25c4f780c9e9d6e46a5a\"\n        hex\"0a23d3bedfe1b14bff3eec36492bb9329f56ddbf7f5e1f122838e96dcfe98c46\"\n        hex\"13a1149cf273a308c777146d7f4be2160aac12980d97661fad18cf682b7c5e24\"\n        hex\"2b74aaa132494d280ca444d5d2a99cd2bd426ff82d443e2b44b8441733bd450d\"\n        hex\"29b8403a3843d4a77b6c70539d8965e57af369d6f32feab13450f3fa985aed18\"\n        hex\"142569f4ef08c2a1947dcb6e99b5ac52cdd5876c50f02bd6afd62fc810a75511\"\n        hex\"0f47bd52a43c690f658374e9f7c2bc4285c641c7116a4ccd2c94f684cbeb7f2a\"\n        hex\"17a29f16b646ebe94c4b2e2c4bc375cd7b002111dd55c4d212e9360cec88c188\"\n        hex\"10416d05ee2eed34165a50f6648eb3e10f77247f711398a14fc77bd5711fc0fa\"\n        hex\"046641ee77bf1c3c58b848252da5a88038a20ab22b0723c37de4753f40a110b4\"\n        hex\"04c68b3d094b4cc491c55531f7ba1bbae0b554816f0c8bc3099061c83099f6fe\"\n        hex\"0e3661a824f5e440eaf439395c1047754ec3e22f44a0f81d73a4dae283cbdf1a\"\n        hex\"0f7226bcc9aed34857296ce6dd82b82f1d086ac24d3b9e51ec3c767a89e0e0d1\"\n        hex\"0fdee6a4513d6ec8f9e2d416c8b87b0c1deaf66702ef14b11f42f9754ae688c2\"\n        hex\"20151e7e27c0331111bf9346db0f4a36d000ac49d03c561a45e23383a0b61d27\"\n        hex\"17cf331edb43a227be4cc3ae2dd0999e07593a95e62cb170d4e11787ca9032a4\"\n        hex\"11b76e488a5eb5703a63e3c43341cd111141c3353d6c634422e63a8ee3a948e6\"\n        hex\"2aaa17be5319a2c4b81597c87a78dd744742127d8f4c942e30a6884a7c40c05a\"\n        hex\"1ceb38f341d5107f31308f3985d72707ee4cc450aeb79b3122d18ab3a811ca32\"\n        hex\"26dbf8986be11183f7bd4bcfc17db4b68fe9a92cc4921fe17aa0352f57787186\"\n        hex\"01a871c9a11ac0eac37adf26c0e380d9e4d4d4c1441bcd52438332f3ec1bce2c\"\n        hex\"1dbda7ce884258ecbf26f6e40029d770ebbe895ac8ce51007d38939c48cf3ed3\"\n        hex\"07109ce5258042b89a7e1969e498b5039080ea3912e326b5ed2cb2c484f1c873\"\n        hex\"2aad746945530cbb6595e6f4038d89e1e0c0f978532ec02e5e12bc9115174a69\"\n        hex\"01576cfa7df9b87f6b6685eaebb7ab84d90e036f352b9a3f32edc2d8fad897f6\"\n        hex\"0a7ed0f5907aa3135577a8bd38c02250ce339b3e500000a8c0bc4dbcb58fae3e\"\n        hex\"14b8a5528c397ee0565c1d305c4679583c7a2273a4263fd7c0e4c0c3cd1593d7\"\n        hex\"0f1645829fddd22d3b28fe608eba622b2dd67dc8282192da3762413ba678ab7f\"\n        hex\"0908dffa0610ac0133c5f7bdfe3469934c78bcb4177d2c1fc618bbac6c2ede6a\"\n        hex\"05c83ee4f9ca0f735c449b31ebaf60e184880a7ce6053dbe5c6abf673b02bc22\"\n        hex\"13ecf7b788d4fab17371a424493bb49447855cfb413af131de52bd75a50b706d\"\n        hex\"0602afc4587fbcbe9da6daf807c3efc632bb8fbc8a3ccadaf73b827542745fa8\"\n        hex\"28bd99e6ae097936294db584bb7eefa8dd7b63144064f7114041a88e69d6e9c6\"\n        hex\"053751ef135a8f6549527e22bfc0580a02a7dd72e9eb6b6a6e73b3f6ec269025\"\n        hex\"1c32a5e4b55b022f9cc73fd585424afedcd1ffbf7e46d2a8e3a86b52a937a629\"\n        hex\"1abff8ffde1de3add8b76c0a6f372e2b921d601c5f3128e5851706eb60ae7b28\"\n        hex\"152769798bc48f6622fdc54ec7efbe576bc6b263ade79359db0db98ee57d465d\"\n        hex\"202fc4613d2f1988d409fce47fb6bf1adba6a9e18b97aae41f82dad5632fdb9f\"\n        hex\"1c9d65765d702a6d24efe251836e629ffc2881d0c218e89cc6467cacec7b1cf7\"\n        hex\"0b0cb3219a1c4f34ef384b4b972c7b045c4b931fd84b41ad619836b6d30b00cd\"\n        hex\"2d79b8879e27e7000430adcd96d6f7c67fcf386a473752668e64c09b2f8010a3\"\n        hex\"0475cfbf8a76a0346f7df43a3eba83f47f139060103130b1a484e7814623d854\"\n        hex\"13be6b6d4ca7746460f0466a5068d54dc9378ec2e46cda7d08deb8a254260e27\"\n        hex\"01edcd7cedeaae1c11de85b2fd1e5dab42fa36e547682937ff684364921b513f\"\n        hex\"1f570a240fd09cbc6fdd1ffb9183668427b376483f723438dee5cc5a6eb961a1\"\n        hex\"2eadf23a07b9fefd2e17ee0d74db1ef80caa7745b9c9f7685fec9b02e5ebb13b\"\n        hex\"2f668953cf91fefe0b441ff07a2f2938f468bc7efd380bef43a030e5fdc41a71\"\n        hex\"118eac608ef4b794efe03a23dd034f13156c02f2762e6e8772b11c7dcf8ddff3\"\n        hex\"2b942a6404366c746c10e3065f1f7932e240446c85c3f8ee5aab85b7727506fb\"\n        hex\"03f113eb05dac7306c758fb6565545232934cfe1a99a5fc63945a4b6d1a652d0\"\n        hex\"2a6d353d3bafac324754fe1a00d57e7f020dbea17231f87d83307bf940e6d676\"\n        hex\"1e7913c116465bfcf367aa331571c24cced6a4992e39ea9c482fc56383625971\"\n        hex\"19111380fafd9f08783dd2497d64685aabb25f5acb60204fd378e0fb0e6da0da\"\n        hex\"22b45e152cd7c40740eefe2d3fec07ea31872401ecbdb762cace9e92e7cbe34e\"\n        hex\"1192d39b9a603bba160da80fda0469b41c2255ac4d0a46402a2844225ffd2539\"\n        hex\"2f46658280ce7b17e40eefb529673a2b3d8f6e25757e9a445e44c7a7149bece4\"\n        hex\"01de74823933559559239322e9363220d322cea2ddba2f6d5610fe883885986d\"\n        hex\"15c53cfddb0f8bccedaee3a4492f2ac1be55d6f0b2f1e7af5f4caff10177904f\"\n        hex\"2ba1a14949b45d15d45e07b4b3c206ed751f86b5f37d70a24a4d8a7dc389aaf7\"\n        hex\"1839769f1f11e18063e3bc10c490bc546d8b35242a93ec4d6b61cacee4f1d4b0\"\n        hex\"1800f7c3137ebc9ac731f7b4d6375c01a874f29000c1b3f4727b65c77a2d5105\"\n        hex\"1bfcdece5c62826292caa2da6ec16b9974d2eb7fd3c2c20d1863db12ef1440be\"\n        hex\"09c696e6067fa41ad890ee8388c0290186e494cbc202e7667d19b56353cece99\"\n        hex\"092b1d93eed7d26456f285906aa196059ebbbc157fbde72b8acab6be8efce28d\"\n        hex\"2fafe0589f5c826f419b1ec3ac176a42c52360e7b3edf90cd4c77c915e47ef06\"\n        hex\"282d48bd742d9e20a5b8dc88aba0744a9124930cc1cc7d692decc7f0ee8a86d5\"\n        hex\"06f42f74816d65e974086055ade94ff76a6fe5d14bd64a069b89b867989d12c8\"\n        hex\"15b575413874cb060adc4fbde9da6215b08bd3c72b9f817bd4e227b818f70235\"\n        hex\"225265caca14dccb262c43230defa44d79efbf96195b8852817b9c2a1a0cee7b\"\n        hex\"065a720651f4d30a03b23445d588a657ec81881b38a6ca7c96ae7d30a228eda7\"\n        hex\"2f8f278929640191de8b4c95a163f7b35d9fc5f38dd11499e2f3f0484fee4d4e\"\n        hex\"2e67e80ed738c79c531bb034d0e3f7703ae1cd93d0334f8cce0e6fd7bbeeb9cd\"\n        hex\"1a4ba16824f4df329914baf49fe4ae2e518d85cd88bc2a4d7511486305611aa9\"\n        hex\"01d1333f199a38fc9c772c5b6dde72d9d9ef90dbe2a7ff20cb9685c2b30ef80c\"\n        hex\"066995da220811544bd79b867d6a45c5f9d5f81246ee7bd867bae77ce1f1a5fd\"\n        hex\"1347a12ac6258ea35211b6ba1a86831915843d88896e58f458f0d5765917c35e\"\n        hex\"035fed90d06219d345c5ec7d3a0ae95883cede928acb380f8ef8b4b6859ef965\"\n        hex\"2abcbb767e6e79b2dd22e5978eed3edd65fc15f583b875d14e2dc2f2a0d8543c\"\n        hex\"2991e9e9d1214bf2bc8020c1c18d861b8fb8829af660a7dfd350321256775ca6\"\n        hex\"13561a0b30e623640fa05d8a5f9540530ec9270d46c5f6607690c93e6e82655d\"\n        hex\"295a4d3659bd1a055dd3f4bb626752a2d06759cdbbcd1bc79b83086649d106e5\"\n        hex\"0ff647b8fb279b8ec301487a755b63b15410d9583977381e2060e794dde87459\"\n        hex\"217e540739dd851a21e60d671a6dba94845f42487c32ec098a9c4c0c19819843\"\n        hex\"1b389bd1a4d6c9f88d6fbb6beb8c25a7f86151da3048fb29ce506076f3b73397\"\n        hex\"01f60ddbcde529f2adcdebd2bf02940c1a9a378e0488c29a0ac38a17a9118bc5\"\n        hex\"165cea4c3361c2b7edc485fb90f788d1b4ecf249b38701ce1ef0472003d9dba7\"\n        hex\"0bcbbc1e5599b61380fae8aa7c48f7dc2c543713ffc9a72a801e1a77f9f37c81\"\n        hex\"0cf8a31e0bb5eb4cdb46f2fc5fca97133ad03ab9cf53883b270a01260c7c534a\"\n        hex\"0e20cd40e05e747fb3bdc07b3cfc50b3ceac18f059ef4f65565f447208335fb8\"\n        hex\"28df7cb07583a984136302cd3baf3b3d9f9177ef97f584b0daab7f0493d25773\"\n        hex\"26d35e5c2e4f1092a1339918cbdbfcb5b1dda82c318103401d4a9e8fc3218159\"\n        hex\"09daf60bcb32e37020e105d8b9bc3aa31900cd3459046ab97eb228675846b691\"\n        hex\"268db848b42be0e8d96f73d79c16df5175b29d4c3e0351a24ee103d2cfe7c283\"\n        hex\"1e4edc4d7bb561c29aafc6662191bcae8aebd4d5113e331b9b537f4fa8598905\"\n        hex\"2d3c39a939554f2b9e6230e96a78c24be4d942154f765e6d4af53a8c4db9407a\"\n        hex\"188b721b564daf9ebf33a146bccea52cbbcdcbfb50740e921f91f7e5672e5e7c\"\n        hex\"2e59d3453f983dff90e45f917cd74501a646319fd22c952f3152b077d5655840\"\n        hex\"1f0bf595db464070ab32553b095f4421524c20568df7ac803a3d299b3dab568d\"\n        hex\"0b68d795eb7b68b11c333b381a2838bd9398fe371f08d48f2ded24e60e02654f\"\n        hex\"18b33a4cd6eeb86b9fafe856f33753ca1cc6756dc4f843e03039dfde879a76b7\"\n        hex\"15e0ee169afa10d37a8062aece61391764ffc6d4dc6ddcb56f35880bb13c7056\"\n        hex\"25c616a97b05678348ce1d52718bb1d8521cff5a3d2ce5b37f7c190dc4786228\"\n        hex\"26a0882f49d8c0fd3be124ef75a7a107778ff66b5be2b66c0b64c2084809ede3\"\n        hex\"070dbc7e5de51ff90466ae52b47a293b4cff6f0cb064b6dde4e00650a68b1541\"\n        hex\"29426faa9a237e4bf88eb59b094786cf49a96fdc54cf6c819e1b67e2b0d68707\"\n        hex\"0f1bd148d0b2faf46659e6db194bfdd5d037aea060737952bc30026f8547737d\"\n        hex\"1d861f4c7a0c0e5c99cd91e2869215dbde6c4fffe1ad1d8744f257aba5b503cb\"\n        hex\"004ace6be69932572926930019040107ca38207eca80735d5de083cd596395ee\"\n        hex\"154d83576e1821b8ecb4f1931ad7721cce29bc17fc237974322e248ada7c23f9\"\n        hex\"2fe852eba0f03f71cdfc34e6193561d3423087aaac643a9edfe25fa2d7f3263c\"\n        hex\"0ada5d6553e357275b59357fc2213e1faf714a22eee3d5d3d502838fcde32e54\"\n        hex\"2e73f204baf6916a3af968db423019f558a87c104c514bd8f164d03d3deba7e8\"\n        hex\"1d29d896aae409cad919a995cc8717b7a078c623bd3af80c056dc1716d043539\"\n        hex\"03644e9c312415bd756683697eb1ba4fea32c710d0f0129ae756984b52611993\"\n        hex\"255a0912167ac123d1a2c9b10380a309d7f3b067b628e9da5085d98b90b0cd85\"\n        hex\"2d54cf1e2971b4c37d511fbd55ca08e2b56ee7fb91386192555f1757dde45860\"\n        hex\"1ce287c5e5b611ff5fb58751b3eb8335a8b5cde2fd2873522cea0e9bf6f5c556\"\n        hex\"0ca0091a58ee20042ac02237bf01843886e4439d859a785362913c0cead1e469\"\n        hex\"1f47e5ac7ec132d0c7136a9487fb0c6cf292b07e5515eb2ae942d4aaef2dfc7f\"\n        hex\"29b08f57557514cdeac066d9eea594a5c5388e8f1064dcf19fe4be16d57b0d41\"\n        hex\"0f27f0132545e917cc90595e93c252a720b8d24b70bcfa0de03a6d3f5d50ef84\"\n        hex\"0404810250839299f6b794c6e9f00432b60d7ca2dc6d754029cfac5b964f09aa\"\n        hex\"0aca49db30da75f002bfb2ee498ac70a5b0f98245a1c2ee6da8c0dd3c59c0207\"\n        hex\"30231cd053a7783a3ab43400f056f622b99507f09e1e16377e2d02c0c39faae9\"\n        hex\"164f1b6eb4908f591b45bc4d4385a161cf46bc1b287369a5eecdfcfd140b62e0\"\n        hex\"188576c886eecbe7191a7406798f0fb4bfa0c7182c135ef595ef570294f7aec7\"\n        hex\"1396e7b28ab67accf1c37de37ebc942bed502f53651a61fc62a1dcfc29d1ce5e\"\n        hex\"11aa2dd7e1659029917e203cc816abc533dca943664bfe41e3d298abf64dc30d\"\n        hex\"0bd1ec3ca032b7d27b8bf71a2e76ccd0c4a313642b6aad073167b8b133ce7679\"\n        hex\"0a7414fcd29c4f31df7e37573a174b7c889dd737f94b684a8b25d89723558978\"\n        hex\"02e3d9093c471054ebfe17ab81c9b7c3ba9691693fe99c34802330498b1ed8fd\"\n        hex\"2602a9d7085929301c5121009e4b9187a06c767ef9aceab2202d20926e03c1ef\"\n        hex\"01e3862f91f2e868c1e148e0f7dc7297989c352cd6e56879888e7e21c0948f52\"\n        hex\"29075542292ff5d8f4d6bf02b27e289f82bc3934ec7bcf5d4ce5d7aa9dbf2f5f\"\n        hex\"11ea16238aa5d188eba8553b6ea4af29ca37201f1b9c9bf7ba44f78264aadabd\"\n        hex\"0504068c9c7063a776872824e1ab4b34178621279772ca089c5ba6d7d4c0d4f5\"\n        hex\"097cd8eccb72c01dc41c17197a0f4216ca4a0d3a476df762e4b3d4f87c8ff926\"\n        hex\"2ce6d1e2f8c9185bd860b2b021b44db3713b420599d990195f8fe82dfaca2fc9\"\n        hex\"305bc541a04645fb6f733b27d7950a233599ced31ad97e8d3297094dba4abd6f\"\n        hex\"295be8a9589ac33d6f04a426390f6e6cd70aec289a6d1ef3264c887280ad42a8\"\n        hex\"103c52bb2708e2a6917efb3fd9145bd1729c2c9fa67f01aba05ab47c56441cdf\"\n        hex\"0816a0b76cabc81cc9f6bae4de63668f12ae669284b5aeca54be6780354b726e\"\n        hex\"0a7bff238cb5cb4c216fcf0f507f40d3679c0acbaef83dd4b5b0db2a9e52c3a6\"\n        hex\"048f17c79c4a7abafdff1d3f955b5da5e0816d44f817b705f484c771f1bac294\"\n        hex\"28973b30874c1236177adc709f0a6b2d32745835162f5ed9ce69f36f156031e4\"\n        hex\"0b2e26c32addc2ceb297648d3fc271a548b9bf788bff4b2023cab820c4a4ee8f\"\n        hex\"201bbb92dcd070b78863668016c24160c2c053dadb24001af4042a1e51246033\"\n        hex\"07507505dd11a39d879137103f9972ad0f6d79ea24cc16610e1c9dd1984cda87\"\n        hex\"1f891703a5676db0633371eca0abacf30d3f4313fc807fbd98d613bef1b3854b\"\n        hex\"16cbd386e41f6c4a173a1312f68148cbb308289a209c213fa51dbc31874fe1ee\"\n        hex\"1e5c8047a5c0c014f7000ea5d3ca333306adef5755efff735059bc055bed75d7\"\n        hex\"1fbb39800b056717d62e76315c4d3e05185e7ee2ece00adefba77bd5b1f4d7bb\"\n        hex\"23fde2d94ad2036e9a94304bc121f6c1845a1327d89a6f55bb9ca81eb91e07cd\"\n        hex\"0f43871c3ac1f1e37bd2755613ed7b3a3ec11a3eb8fff749ab22f92446f62f85\"\n        hex\"152339e3e373c4e4ad9b657f5e665676790ca0bf8e005767aedd4269d107d4f1\"\n        hex\"1e6b4bc7a2e4217c1c3cc2e298e450d010fd622c47e2cd7880e64b2e6b2e6fdf\"\n        hex\"28958ca1ae65967871544bd1afd71c06b4b39318d5a076091a1266627ad1b40f\"\n        hex\"0ceb66234377758d63f8c56e66c0af644ead06b4e987bde957467e75938f1404\"\n        hex\"0e31fe264d2cc1f55a3fce3ce86a68196d2a06336102c14d0cc892fc871d6f42\"\n        hex\"19b29228092e58a02047d8debf48ba1442ea38aceb82605e8bfa7460c49af496\"\n        hex\"0e0528ae6d904bb6c6379fef10cb1d1bc6e867054acf978041ce99becefb2193\"\n        hex\"22efa15c26a14170452119318cb1073b15b978fd05c40a5001560edf21df4aac\"\n        hex\"2aeea52c33986c164976c52dfb73b8524b9e12650cc2e6614eb1efd1d3134f58\"\n        hex\"25ca08820ba2a38dcd2561640ae9935ef47b5da8a801641a7066f7dbc52ff365\"\n        hex\"1d8489971cf0f77a525cae847acd5056502177b00ca5b72b3f0fb32e0bb85bb8\"\n        hex\"16d389fa12477aa6c862499500c516228cd9ae7c652c3f61f641b6590b800671\"\n        hex\"16569eaf77c8ec57e85b52ee30cd6212133a17ca3a4e87bcfd7507598616214d\"\n        hex\"0e2b188f173ee86cce1a411c0d2ff80e1ead326474358dbf412f8e540c01aa91\"\n        hex\"173f752e069ecc268a7427e0935db3acd27fb7bc097e2b2c58d5a6acdd1fb4c1\"\n        hex\"0ef703b9687c4c6f9deddc9c9d3ef5ba1d9a87529d0a7387bc569c6c642913c4\"\n        hex\"25fa7538cb83e2a689d5caeac55b325d3597547ef6c8dc122a2a6d000c344eec\"\n        hex\"023e56786b482a73477d0fd36701f0eddd08298e43913144c3f7b879d0988761\"\n        hex\"2efec260abd0d45688e61558f0288cbddd8b5774e48466f164d5e522b5441314\"\n        hex\"14d6f2fe1a75dc3f898674bca43b786b3eebb0e2ac53ea6336d2d0496f23399c\"\n        hex\"133eef87007a5128b3f86d3ff94bdd1a0143b28d4b72e7b02b2022147764b03a\"\n        hex\"20a11d5fb29aa2ab37f2917d0b42ef10170b5f8614bc6e4decda4186dfafba37\";\n\n    function getPts(uint256 merkleTreeDepth) internal pure returns (uint256[SET_SIZE] memory pts) {\n        bytes memory ptBytes = VK_POINT_BYTES;\n        uint256 byteOffset = 32 + (merkleTreeDepth - 1) * SET_SIZE * 32;\n\n        for (uint256 idx = 0; idx < SET_SIZE; ++idx) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let val := mload(add(ptBytes, add(byteOffset, mul(idx, 32))))\n                let storedAt := add(pts, mul(idx, 32))\n                mstore(storedAt, val)\n            }\n        }\n    }\n\n    function checkInvariant(uint8 maxDepth) internal pure {\n        uint256 expected = maxDepth * SET_SIZE * 32;\n        if (VK_POINT_BYTES.length != expected) {\n            revert Semaphore__VKPtBytesMaxDepthInvariantViolated(VK_POINT_BYTES.length, expected);\n        }\n    }\n}"
    },
    "contracts/HelloStatusNetwork.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract HelloStatusNetwork {\n    string public greet = \"Hello, Status Network!\";\n\n    function setGreet(string memory _greet) public {\n        greet = _greet;\n    }\n\n    function getGreet() public view returns (string memory) {\n        return greet;\n    }\n}\n"
    },
    "contracts/interfaces/ISemaphore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\n/// @title Semaphore contract interface.\ninterface ISemaphore {\n    error Semaphore__GroupHasNoMembers();\n    error Semaphore__MerkleTreeDepthIsNotSupported();\n    error Semaphore__MerkleTreeRootIsExpired();\n    error Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\n    error Semaphore__YouAreUsingTheSameNullifierTwice();\n    error Semaphore__InvalidProof();\n\n    /// It defines all the group parameters used by Semaphore.sol.\n    struct Group {\n        uint256 merkleTreeDuration;\n        mapping(uint256 => uint256) merkleRootCreationDates;\n        mapping(uint256 => bool) nullifiers;\n    }\n\n    /// It defines all the Semaphore proof parameters used by Semaphore.sol.\n    struct SemaphoreProof {\n        uint256 merkleTreeDepth;\n        uint256 merkleTreeRoot;\n        uint256 nullifier;\n        uint256 message;\n        uint256 scope;\n        uint256[8] points;\n    }\n\n    /// @dev Event emitted when the Merkle tree duration of a group is updated.\n    /// @param groupId: Id of the group.\n    /// @param oldMerkleTreeDuration: Old Merkle tree duration of the group.\n    /// @param newMerkleTreeDuration: New Merkle tree duration of the group.\n    event GroupMerkleTreeDurationUpdated(\n        uint256 indexed groupId,\n        uint256 oldMerkleTreeDuration,\n        uint256 newMerkleTreeDuration\n    );\n\n    /// @dev Event emitted when a Semaphore proof is validated.\n    /// @param groupId: Id of the group.\n    /// @param merkleTreeDepth: Depth of the Merkle tree.\n    /// @param merkleTreeRoot: Root of the Merkle tree.\n    /// @param nullifier: Nullifier.\n    /// @param message: Semaphore message.\n    /// @param scope: Scope.\n    /// @param points: Zero-knowledge points.\n    event ProofValidated(\n        uint256 indexed groupId,\n        uint256 merkleTreeDepth,\n        uint256 indexed merkleTreeRoot,\n        uint256 nullifier,\n        uint256 message,\n        uint256 indexed scope,\n        uint256[8] points\n    );\n\n    /// @dev Returns the current value of the group counter.\n    /// @return The current group counter value.\n    function groupCounter() external view returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup() external returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup(address admin) external returns (uint256);\n\n    /// @dev It creates a group with a custom Merkle tree duration.\n    /// @param admin: Admin of the group. It can be an Ethereum account or a smart contract.\n    /// @param merkleTreeDuration: Merkle tree duration.\n    /// @return Id of the group.\n    function createGroup(address admin, uint256 merkleTreeDuration) external returns (uint256);\n\n    /// @dev See {SemaphoreGroups-_updateGroupAdmin}.\n    function updateGroupAdmin(uint256 groupId, address newAdmin) external;\n\n    /// @dev See {SemaphoreGroups-_acceptGroupAdmin}.\n    function acceptGroupAdmin(uint256 groupId) external;\n\n    /// @dev Updates the group Merkle tree duration.\n    /// @param groupId: Id of the group.\n    /// @param newMerkleTreeDuration: New Merkle tree duration.\n    function updateGroupMerkleTreeDuration(uint256 groupId, uint256 newMerkleTreeDuration) external;\n\n    /// @dev See {SemaphoreGroups-_addMember}.\n    function addMember(uint256 groupId, uint256 identityCommitment) external;\n\n    /// @dev See {SemaphoreGroups-_addMembers}.\n    function addMembers(uint256 groupId, uint256[] calldata identityCommitments) external;\n\n    /// @dev See {SemaphoreGroups-_updateMember}.\n    function updateMember(\n        uint256 groupId,\n        uint256 oldIdentityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external;\n\n    /// @dev See {SemaphoreGroups-_removeMember}.\n    function removeMember(uint256 groupId, uint256 identityCommitment, uint256[] calldata merkleProofSiblings) external;\n\n    /// @dev Saves the nullifier hash to prevent double signaling and emits an event\n    /// if the zero-knowledge proof is valid.\n    /// @param groupId: Id of the group.\n    /// @param proof: Semaphore zero-knowledge proof.\n    function validateProof(uint256 groupId, SemaphoreProof calldata proof) external;\n\n    /// @dev Verifies a zero-knowledge proof by returning true or false.\n    /// @param groupId: Id of the group.\n    /// @param proof: Semaphore zero-knowledge proof.\n    function verifyProof(uint256 groupId, SemaphoreProof calldata proof) external view returns (bool);\n}"
    },
    "contracts/interfaces/ISemaphoreGroups.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\n/// @title SemaphoreGroups contract interface.\ninterface ISemaphoreGroups {\n    error Semaphore__GroupDoesNotExist();\n    error Semaphore__CallerIsNotTheGroupAdmin();\n    error Semaphore__CallerIsNotThePendingGroupAdmin();\n\n    /// @dev Event emitted when a new group is created.\n    /// @param groupId: Id of the group.\n    event GroupCreated(uint256 indexed groupId);\n\n    /// @dev Event emitted when a new admin is assigned to a group.\n    /// @param groupId: Id of the group.\n    /// @param oldAdmin: Old admin of the group.\n    /// @param newAdmin: New admin of the group.\n    event GroupAdminUpdated(uint256 indexed groupId, address indexed oldAdmin, address indexed newAdmin);\n\n    /// @dev Event emitted when a group admin is being updated.\n    /// @param groupId: Id of the group.\n    /// @param oldAdmin: Old admin of the group.\n    /// @param newAdmin: New admin of the group.\n    event GroupAdminPending(uint256 indexed groupId, address indexed oldAdmin, address indexed newAdmin);\n\n    /// @dev Event emitted when a new identity commitment is added.\n    /// @param groupId: Group id of the group.\n    /// @param index: Merkle tree leaf index.\n    /// @param identityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberAdded(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Event emitted when many identity commitments are added at the same time.\n    /// @param groupId: Group id of the group.\n    /// @param startIndex: Index of the first element of the new identity commitments in the merkle tree.\n    /// @param identityCommitments: The new identity commitments.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MembersAdded(\n        uint256 indexed groupId,\n        uint256 startIndex,\n        uint256[] identityCommitments,\n        uint256 merkleTreeRoot\n    );\n\n    /// @dev Event emitted when an identity commitment is updated.\n    /// @param groupId: Group id of the group.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be updated.\n    /// @param newIdentityCommitment: New identity commitment.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberUpdated(\n        uint256 indexed groupId,\n        uint256 index,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256 merkleTreeRoot\n    );\n\n    /// @dev Event emitted when a new identity commitment is removed.\n    /// @param groupId: Group id of the group.\n    /// @param index: Identity commitment index.\n    /// @param identityCommitment: Existing identity commitment to be removed.\n    /// @param merkleTreeRoot: New root hash of the tree.\n    event MemberRemoved(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\n\n    /// @dev Returns the address of the group admin. The group admin can be an Ethereum account or a smart contract.\n    /// @param groupId: Id of the group.\n    /// @return Address of the group admin.\n    function getGroupAdmin(uint256 groupId) external view returns (address);\n\n    /// @dev Returns true if a member exists in a group.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Identity commitment.\n    /// @return True if the member exists, false otherwise.\n    function hasMember(uint256 groupId, uint256 identityCommitment) external view returns (bool);\n\n    /// @dev Returns the index of a member.\n    /// @param groupId: Id of the group.\n    /// @param identityCommitment: Identity commitment.\n    /// @return Index of member.\n    function indexOf(uint256 groupId, uint256 identityCommitment) external view returns (uint256);\n\n    /// @dev Returns the last root hash of a group.\n    /// @param groupId: Id of the group.\n    /// @return Root hash of the group.\n    function getMerkleTreeRoot(uint256 groupId) external view returns (uint256);\n\n    /// @dev Returns the depth of the tree of a group.\n    /// @param groupId: Id of the group.\n    /// @return Depth of the group tree.\n    function getMerkleTreeDepth(uint256 groupId) external view returns (uint256);\n\n    /// @dev Returns the number of tree leaves of a group.\n    /// @param groupId: Id of the group.\n    /// @return Number of tree leaves.\n    function getMerkleTreeSize(uint256 groupId) external view returns (uint256);\n}"
    },
    "contracts/interfaces/ISemaphoreVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\n/// @title SemaphoreVerifier contract interface.\ninterface ISemaphoreVerifier {\n    /// @dev Returns true if the proof was successfully verified.\n    /// @param _pA: Point A.\n    /// @param _pB: Point B.\n    /// @param _pC: Point C.\n    /// @param _pubSignals: Public signals.\n    /// @param merkleTreeDepth: Merkle tree depth.\n    /// @return True if the proof was successfully verified, false otherwise.\n    function verifyProof(\n        uint[2] calldata _pA,\n        uint[2][2] calldata _pB,\n        uint[2] calldata _pC,\n        uint[4] calldata _pubSignals,\n        uint merkleTreeDepth\n    ) external view returns (bool);\n}"
    },
    "contracts/Semaphore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.23 <0.9.0;\n\nimport {ISemaphore} from \"./interfaces/ISemaphore.sol\";\nimport {ISemaphoreVerifier} from \"./interfaces/ISemaphoreVerifier.sol\";\nimport {SemaphoreGroups} from \"./base/SemaphoreGroups.sol\";\nimport {MIN_DEPTH, MAX_DEPTH} from \"./base/Constants.sol\";\n\n/// @title Semaphore\n/// @dev This contract uses the Semaphore base contracts to provide a complete service\n/// to allow admins to create and manage groups and their members to verify Semaphore proofs\n/// Group admins can add, update or remove group members, and can be an Ethereum account or a smart contract.\n/// This contract also assigns each new Merkle tree generated with a new root a duration (or an expiry)\n/// within which the proofs generated with that root can be validated.\ncontract Semaphore is ISemaphore, SemaphoreGroups {\n    ISemaphoreVerifier public verifier;\n\n    /// @dev Gets a group id and returns the group parameters.\n    mapping(uint256 => Group) public groups;\n\n    /// @dev Counter to assign an incremental id to the groups.\n    /// This counter is used to keep track of the number of groups created.\n    uint256 public groupCounter;\n\n    /// @dev Initializes the Semaphore verifier used to verify the user's ZK proofs.\n    /// @param _verifier: Semaphore verifier addresse.\n    constructor(ISemaphoreVerifier _verifier) {\n        verifier = _verifier;\n    }\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup() external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, msg.sender);\n\n        groups[groupId].merkleTreeDuration = 1 hours;\n    }\n\n    /// @dev See {SemaphoreGroups-_createGroup}.\n    function createGroup(address admin) external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, admin);\n\n        groups[groupId].merkleTreeDuration = 1 hours;\n    }\n\n    /// @dev See {ISemaphore-createGroup}.\n    function createGroup(address admin, uint256 merkleTreeDuration) external override returns (uint256 groupId) {\n        groupId = groupCounter++;\n        _createGroup(groupId, admin);\n\n        groups[groupId].merkleTreeDuration = merkleTreeDuration;\n    }\n\n    /// @dev See {SemaphoreGroups-_updateGroupAdmin}.\n    function updateGroupAdmin(uint256 groupId, address newAdmin) external override {\n        _updateGroupAdmin(groupId, newAdmin);\n    }\n\n    /// @dev See {SemaphoreGroups- acceptGroupAdmin}.\n    function acceptGroupAdmin(uint256 groupId) external override {\n        _acceptGroupAdmin(groupId);\n    }\n\n    /// @dev See {ISemaphore-updateGroupMerkleTreeDuration}.\n    function updateGroupMerkleTreeDuration(\n        uint256 groupId,\n        uint256 newMerkleTreeDuration\n    ) external override onlyGroupAdmin(groupId) {\n        uint256 oldMerkleTreeDuration = groups[groupId].merkleTreeDuration;\n\n        groups[groupId].merkleTreeDuration = newMerkleTreeDuration;\n\n        emit GroupMerkleTreeDurationUpdated(groupId, oldMerkleTreeDuration, newMerkleTreeDuration);\n    }\n\n    /// @dev See {SemaphoreGroups-_addMember}.\n    function addMember(uint256 groupId, uint256 identityCommitment) external override {\n        uint256 merkleTreeRoot = _addMember(groupId, identityCommitment);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_addMembers}.\n    function addMembers(uint256 groupId, uint256[] calldata identityCommitments) external override {\n        uint256 merkleTreeRoot = _addMembers(groupId, identityCommitments);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_updateMember}.\n    function updateMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256 newIdentityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external override {\n        uint256 merkleTreeRoot = _updateMember(groupId, identityCommitment, newIdentityCommitment, merkleProofSiblings);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {SemaphoreGroups-_removeMember}.\n    function removeMember(\n        uint256 groupId,\n        uint256 identityCommitment,\n        uint256[] calldata merkleProofSiblings\n    ) external override {\n        uint256 merkleTreeRoot = _removeMember(groupId, identityCommitment, merkleProofSiblings);\n\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block.timestamp;\n    }\n\n    /// @dev See {ISemaphore-validateProof}.\n    function validateProof(uint256 groupId, SemaphoreProof calldata proof) external override {\n        // The function will revert if the nullifier that is part of the proof,\n        // was already used inside the group with id groupId.\n        if (groups[groupId].nullifiers[proof.nullifier]) {\n            revert Semaphore__YouAreUsingTheSameNullifierTwice();\n        }\n\n        // The function will revert if the proof is not verified successfully.\n        if (!verifyProof(groupId, proof)) {\n            revert Semaphore__InvalidProof();\n        }\n\n        // Saves the nullifier so that it cannot be used again to successfully verify a proof\n        // that is part of the group with id groupId.\n        groups[groupId].nullifiers[proof.nullifier] = true;\n\n        emit ProofValidated(\n            groupId,\n            proof.merkleTreeDepth,\n            proof.merkleTreeRoot,\n            proof.nullifier,\n            proof.message,\n            proof.scope,\n            proof.points\n        );\n    }\n\n    /// @dev See {ISemaphore-verifyProof}.\n    function verifyProof(\n        uint256 groupId,\n        SemaphoreProof calldata proof\n    ) public view override onlyExistingGroup(groupId) returns (bool) {\n        // The function will revert if the Merkle tree depth is not supported.\n        if (proof.merkleTreeDepth < MIN_DEPTH || proof.merkleTreeDepth > MAX_DEPTH) {\n            revert Semaphore__MerkleTreeDepthIsNotSupported();\n        }\n\n        // Gets the number of leaves in the Incremental Merkle Tree that represents the group\n        // with id groupId which is the same as the number of members in the group groupId.\n        uint256 merkleTreeSize = getMerkleTreeSize(groupId);\n\n        // The function will revert if there are no members in the group.\n        if (merkleTreeSize == 0) {\n            revert Semaphore__GroupHasNoMembers();\n        }\n\n        // Gets the Merkle root of the Incremental Merkle Tree that represents the group with id groupId.\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(groupId);\n\n        // A proof could have used an old Merkle tree root.\n        // https://github.com/semaphore-protocol/semaphore/issues/98\n        if (proof.merkleTreeRoot != currentMerkleTreeRoot) {\n            uint256 merkleRootCreationDate = groups[groupId].merkleRootCreationDates[proof.merkleTreeRoot];\n            uint256 merkleTreeDuration = groups[groupId].merkleTreeDuration;\n\n            if (merkleRootCreationDate == 0) {\n                revert Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\n            }\n\n            if (block.timestamp > merkleRootCreationDate + merkleTreeDuration) {\n                revert Semaphore__MerkleTreeRootIsExpired();\n            }\n        }\n\n        return\n            verifier.verifyProof(\n                [proof.points[0], proof.points[1]],\n                [[proof.points[2], proof.points[3]], [proof.points[4], proof.points[5]]],\n                [proof.points[6], proof.points[7]],\n                [proof.merkleTreeRoot, proof.nullifier, _hash(proof.message), _hash(proof.scope)],\n                proof.merkleTreeDepth\n            );\n    }\n\n    /// @dev Creates a keccak256 hash of a message compatible with the SNARK scalar modulus.\n    /// @param message: Message to be hashed.\n    /// @return Message digest.\n    function _hash(uint256 message) private pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(message))) >> 8;\n    }\n}"
    },
    "poseidon-solidity/PoseidonT3.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nlibrary PoseidonT3 {\n  uint constant M00 = 0x109b7f411ba0e4c9b2b70caf5c36a7b194be7c11ad24378bfedb68592ba8118b;\n  uint constant M01 = 0x2969f27eed31a480b9c36c764379dbca2cc8fdd1415c3dded62940bcde0bd771;\n  uint constant M02 = 0x143021ec686a3f330d5f9e654638065ce6cd79e28c5b3753326244ee65a1b1a7;\n  uint constant M10 = 0x16ed41e13bb9c0c66ae119424fddbcbc9314dc9fdbdeea55d6c64543dc4903e0;\n  uint constant M11 = 0x2e2419f9ec02ec394c9871c832963dc1b89d743c8c7b964029b2311687b1fe23;\n  uint constant M12 = 0x176cc029695ad02582a70eff08a6fd99d057e12e58e7d7b6b16cdfabc8ee2911;\n\n  // See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\n  // Inspired by: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\n  function hash(uint[2] memory) public pure returns (uint) {\n    assembly {\n      let F := 21888242871839275222246405745257275088548364400416034343698204186575808495617\n      let M20 := 0x2b90bba00fca0589f617e7dcbfe82e0df706ab640ceb247b791a93b74e36736d\n      let M21 := 0x101071f0032379b697315876690f053d148d4e109f5fb065c8aacc55a0f89bfa\n      let M22 := 0x19a3fc0a56702bf417ba7fee3802593fa644470307043f7773279cd71d25d5e0\n\n      // load the inputs from memory\n      let state1 := add(mod(mload(0x80), F), 0x00f1445235f2148c5986587169fc1bcd887b08d4d00868df5696fff40956e864)\n      let state2 := add(mod(mload(0xa0), F), 0x08dff3487e8ac99e1f29a058d0fa80b930c728730b7ab36ce879f3890ecf73f5)\n      let scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(\n        0x2f27be690fdaee46c3ce28f7532b13c856c35342c84bda6e20966310fadc01d0,\n        add(add(15452833169820924772166449970675545095234312153403844297388521437673434406763, mulmod(state1, M10, F)), mulmod(state2, M20, F))\n      )\n      let scratch1 := add(\n        0x2b2ae1acf68b7b8d2416bebf3d4f6234b763fe04b8043ee48b8327bebca16cf2,\n        add(add(18674271267752038776579386132900109523609358935013267566297499497165104279117, mulmod(state1, M11, F)), mulmod(state2, M21, F))\n      )\n      let scratch2 := add(\n        0x0319d062072bef7ecca5eac06f97d4d55952c175ab6b03eae64b44c7dbf11cfa,\n        add(add(14817777843080276494683266178512808687156649753153012854386334860566696099579, mulmod(state1, M12, F)), mulmod(state2, M22, F))\n      )\n      let state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x28813dcaebaeaa828a376df87af4a63bc8b7bf27ad49c6298ef7b387bf28526d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2727673b2ccbc903f181bf38e1c1d40d2033865200c352bc150928adddf9cb78, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x234ec45ca27727c2e74abd2b2a1494cd6efbd43e340587d6b8fb9e31e65cc632, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x15b52534031ae18f7f862cb2cf7cf760ab10a8150a337b1ccd99ff6e8797d428, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0dc8fad6d9e4b35f5ed9a3d186b79ce38e0e8a8d1b58b132d701d4eecf68d1f6, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1bcd95ffc211fbca600f705fad3fb567ea4eb378f62e1fec97805518a47e4d9c, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x10520b0ab721cadfe9eff81b016fc34dc76da36c2578937817cb978d069de559, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f6d48149b8e7f7d9b257d8ed5fbbaf42932498075fed0ace88a9eb81f5627f6, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1d9655f652309014d29e00ef35a2089bfff8dc1c816f0dc9ca34bdb5460c8705, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04df5a56ff95bcafb051f7b1cd43a99ba731ff67e47032058fe3d4185697cc7d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0672d995f8fff640151b3d290cedaf148690a10a8c8424a7f6ec282b6e4be828, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x099952b414884454b21200d7ffafdd5f0c9a9dcc06f2708e9fc1d8209b5c75b9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x052cba2255dfd00c7c483143ba8d469448e43586a9b4cd9183fd0e843a6b9fa6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0b8badee690adb8eb0bd74712b7999af82de55707251ad7716077cb93c464ddc, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x119b1590f13307af5a1ee651020c07c749c15d60683a8050b963d0a8e4b2bdd1, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x03150b7cd6d5d17b2529d36be0f67b832c4acfc884ef4ee5ce15be0bfb4a8d09, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2cc6182c5e14546e3cf1951f173912355374efb83d80898abe69cb317c9ea565, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x005032551e6378c450cfe129a404b3764218cadedac14e2b92d2cd73111bf0f9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x233237e3289baa34bb147e972ebcb9516469c399fcc069fb88f9da2cc28276b5, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x05c8f4f4ebd4a6e3c980d31674bfbe6323037f21b34ae5a4e80c2d4c24d60280, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a7b1db13042d396ba05d818a319f25252bcf35ef3aeed91ee1f09b2590fc65b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a73b71f9b210cf5b14296572c9d32dbf156e2b086ff47dc5df542365a404ec0, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1ac9b0417abcc9a1935107e9ffc91dc3ec18f2c4dbe7f22976a760bb5c50c460, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x12c0339ae08374823fabb076707ef479269f3e4d6cb104349015ee046dc93fc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b7475b102a165ad7f5b18db4e1e704f52900aa3253baac68246682e56e9a28e, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x037c2849e191ca3edb1c5e49f6e8b8917c843e379366f2ea32ab3aa88d7f8448, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x05a6811f8556f014e92674661e217e9bd5206c5c93a07dc145fdb176a716346f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x29a795e7d98028946e947b75d54e9f044076e87a7b2883b47b675ef5f38bd66e, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x20439a0c84b322eb45a3857afc18f5826e8c7382c8a1585c507be199981fd22f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2e0ba8d94d9ecf4a94ec2050c7371ff1bb50f27799a84b6d4a2a6f2a0982c887, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x143fd115ce08fb27ca38eb7cce822b4517822cd2109048d2e6d0ddcca17d71c8, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0c64cbecb1c734b857968dbbdcf813cdf8611659323dbcbfc84323623be9caf1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x028a305847c683f646fca925c163ff5ae74f348d62c2b670f1426cef9403da53, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2e4ef510ff0b6fda5fa940ab4c4380f26a6bcb64d89427b824d6755b5db9e30c, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0081c95bc43384e663d79270c956ce3b8925b4f6d033b078b96384f50579400e, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2ed5f0c91cbd9749187e2fade687e05ee2491b349c039a0bba8a9f4023a0bb38, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x30509991f88da3504bbf374ed5aae2f03448a22c76234c8c990f01f33a735206, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c3f20fd55409a53221b7c4d49a356b9f0a1119fb2067b41a7529094424ec6ad, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10b4e7f3ab5df003049514459b6e18eec46bb2213e8e131e170887b47ddcb96c, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2a1982979c3ff7f43ddd543d891c2abddd80f804c077d775039aa3502e43adef, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c74ee64f15e1db6feddbead56d6d55dba431ebc396c9af95cad0f1315bd5c91, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07533ec850ba7f98eab9303cace01b4b9e4f2e8b82708cfa9c2fe45a0ae146a0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x21576b438e500449a151e4eeaf17b154285c68f42d42c1808a11abf3764c0750, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2f17c0559b8fe79608ad5ca193d62f10bce8384c815f0906743d6930836d4a9e, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x2d477e3862d07708a79e8aae946170bc9775a4201318474ae665b0b1b7e2730e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x162f5243967064c390e095577984f291afba2266c38f5abcd89be0f5b2747eab, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2b4cb233ede9ba48264ecd2c8ae50d1ad7a8596a87f29f8a7777a70092393311, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2c8fbcb2dd8573dc1dbaf8f4622854776db2eece6d85c4cf4254e7c35e03b07a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1d6f347725e4816af2ff453f0cd56b199e1b61e9f601e9ade5e88db870949da9, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x204b0c397f4ebe71ebc2d8b3df5b913df9e6ac02b68d31324cd49af5c4565529, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0c4cb9dc3c4fd8174f1149b3c63c3c2f9ecb827cd7dc25534ff8fb75bc79c502, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x174ad61a1448c899a25416474f4930301e5c49475279e0639a616ddc45bc7b54, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a96177bcf4d8d89f759df4ec2f3cde2eaaa28c177cc0fa13a9816d49a38d2ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x066d04b24331d71cd0ef8054bc60c4ff05202c126a233c1a8242ace360b8a30a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a4c4fc6ec0b0cf52195782871c6dd3b381cc65f72e02ad527037a62aa1bd804, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x13ab2d136ccf37d447e9f2e14a7cedc95e727f8446f6d9d7e55afc01219fd649, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1121552fca26061619d24d843dc82769c1b04fcec26f55194c2e3e869acc6a9a, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00ef653322b13d6c889bc81715c37d77a6cd267d595c4a8909a5546c7c97cff1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0e25483e45a665208b261d8ba74051e6400c776d652595d9845aca35d8a397d3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29f536dcb9dd7682245264659e15d88e395ac3d4dde92d8c46448db979eeba89, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2a56ef9f2c53febadfda33575dbdbd885a124e2780bbea170e456baace0fa5be, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1c8361c78eb5cf5decfb7a2d17b5c409f2ae2999a46762e8ee416240a8cb9af1, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x151aff5f38b20a0fc0473089aaf0206b83e8e68a764507bfd3d0ab4be74319c5, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x04c6187e41ed881dc1b239c88f7f9d43a9f52fc8c8b6cdd1e76e47615b51f100, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x13b37bd80f4d27fb10d84331f6fb6d534b81c61ed15776449e801b7ddc9c2967, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x01a5c536273c2d9df578bfbd32c17b7a2ce3664c2a52032c9321ceb1c4e8a8e4, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ab3561834ca73835ad05f5d7acb950b4a9a2c666b9726da832239065b7c3b02, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1d4d8ec291e720db200fe6d686c0d613acaf6af4e95d3bf69f7ed516a597b646, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x041294d2cc484d228f5784fe7919fd2bb925351240a04b711514c9c80b65af1d, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x154ac98e01708c611c4fa715991f004898f57939d126e392042971dd90e81fc6, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0b339d8acca7d4f83eedd84093aef51050b3684c88f8b0b04524563bc6ea4da4, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0955e49e6610c94254a4f84cfbab344598f0e71eaff4a7dd81ed95b50839c82e, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x06746a6156eba54426b9e22206f15abca9a6f41e6f535c6f3525401ea0654626, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f18f5a0ecd1423c496f3820c549c27838e5790e2bd0a196ac917c7ff32077fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04f6eeca1751f7308ac59eff5beb261e4bb563583ede7bc92a738223d6f76e13, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2b56973364c4c4f5c1a3ec4da3cdce038811eb116fb3e45bc1768d26fc0b3758, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x123769dd49d5b054dcd76b89804b1bcb8e1392b385716a5d83feb65d437f29ef, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2147b424fc48c80a88ee52b91169aacea989f6446471150994257b2fb01c63e9, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0fdc1f58548b85701a6c5505ea332a29647e6f34ad4243c2ea54ad897cebe54d, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x12373a8251fea004df68abcf0f7786d4bceff28c5dbbe0c3944f685cc0a0b1f2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x21e4f4ea5f35f85bad7ea52ff742c9e8a642756b6af44203dd8a1f35c1a90035, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x16243916d69d2ca3dfb4722224d4c462b57366492f45e90d8a81934f1bc3b147, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1efbe46dd7a578b4f66f9adbc88b4378abc21566e1a0453ca13a4159cac04ac2, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x07ea5e8537cf5dd08886020e23a7f387d468d5525be66f853b672cc96a88969a, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x05a8c4f9968b8aa3b7b478a30f9a5b63650f19a75e7ce11ca9fe16c0b76c00bc, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x20f057712cc21654fbfe59bd345e8dac3f7818c701b9c7882d9d57b72a32e83f, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x04a12ededa9dfd689672f8c67fee31636dcd8e88d01d49019bd90b33eb33db69, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x27e88d8c15f37dcee44f1e5425a51decbd136ce5091a6767e49ec9544ccd101a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2feed17b84285ed9b8a5c8c5e95a41f66e096619a7703223176c41ee433de4d1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1ed7cc76edf45c7c404241420f729cf394e5942911312a0d6972b8bd53aff2b8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x15742e99b9bfa323157ff8c586f5660eac6783476144cdcadf2874be45466b1a, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1aac285387f65e82c895fc6887ddf40577107454c6ec0317284f033f27d0c785, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x25851c3c845d4790f9ddadbdb6057357832e2e7a49775f71ec75a96554d67c77, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x15a5821565cc2ec2ce78457db197edf353b7ebba2c5523370ddccc3d9f146a67, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2411d57a4813b9980efa7e31a1db5966dcf64f36044277502f15485f28c71727, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x002e6f8d6520cd4713e335b8c0b6d2e647e9a98e12f4cd2558828b5ef6cb4c9b, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2ff7bc8f4380cde997da00b616b0fcd1af8f0e91e2fe1ed7398834609e0315d2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x00b9831b948525595ee02724471bcd182e9521f6b7bb68f1e93be4febb0d3cbe, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0a2f53768b8ebf6a86913b0e57c04e011ca408648a4743a87d77adbf0c9c3512, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x00248156142fd0373a479f91ff239e960f599ff7e94be69b7f2a290305e1198d, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x171d5620b87bfb1328cf8c02ab3f0c9a397196aa6a542c2350eb512a2b2bcda9, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x170a4f55536f7dc970087c7c10d6fad760c952172dd54dd99d1045e4ec34a808, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x29aba33f799fe66c2ef3134aea04336ecc37e38c1cd211ba482eca17e2dbfae1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1e9bc179a4fdd758fdd1bb1945088d47e70d114a03f6a0e8b5ba650369e64973, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1dd269799b660fad58f7f4892dfb0b5afeaad869a9c4b44f9c9e1c43bdaf8f09, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x22cdbc8b70117ad1401181d02e15459e7ccd426fe869c7c95d1dd2cb0f24af38, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x0ef042e454771c533a9f57a55c503fcefd3150f52ed94a7cd5ba93b9c7dacefd, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x11609e06ad6c8fe2f287f3036037e8851318e8b08a0359a03b304ffca62e8284, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1166d9e554616dba9e753eea427c17b7fecd58c076dfe42708b08f5b783aa9af, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2de52989431a859593413026354413db177fbf4cd2ac0b56f855a888357ee466, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x3006eb4ffc7a85819a6da492f3a8ac1df51aee5b17b8e89d74bf01cf5f71e9ad, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2af41fbb61ba8a80fdcf6fff9e3f6f422993fe8f0a4639f962344c8225145086, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x119e684de476155fe5a6b41a8ebc85db8718ab27889e85e781b214bace4827c3, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1835b786e2e8925e188bea59ae363537b51248c23828f047cff784b97b3fd800, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x28201a34c594dfa34d794996c6433a20d152bac2a7905c926c40e285ab32eeb6, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x083efd7a27d1751094e80fefaf78b000864c82eb571187724a761f88c22cc4e7, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0b6f88a3577199526158e61ceea27be811c16df7774dd8519e079564f61fd13b, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0ec868e6d15e51d9644f66e1d6471a94589511ca00d29e1014390e6ee4254f5b, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2af33e3f866771271ac0c9b3ed2e1142ecd3e74b939cd40d00d937ab84c98591, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0b520211f904b5e7d09b5d961c6ace7734568c547dd6858b364ce5e47951f178, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0b2d722d0919a1aad8db58f10062a92ea0c56ac4270e822cca228620188a1d40, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x1f790d4d7f8cf094d980ceb37c2453e957b54a9991ca38bbe0061d1ed6e562d4, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x0171eb95dfbf7d1eaea97cd385f780150885c16235a2a6a8da92ceb01e504233, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0c2d0e3b5fd57549329bf6885da66b9b790b40defd2c8650762305381b168873, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1162fb28689c27154e5a8228b4e72b377cbcafa589e283c35d3803054407a18d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2f1459b65dee441b64ad386a91e8310f282c5a92a89e19921623ef8249711bc0, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x1e6ff3216b688c3d996d74367d5cd4c1bc489d46754eb712c243f70d1b53cfbb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x01ca8be73832b8d0681487d27d157802d741a6f36cdc2a0576881f9326478875, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1f7735706ffe9fc586f976d5bdf223dc680286080b10cea00b9b5de315f9650e, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2522b60f4ea3307640a0c2dce041fba921ac10a3d5f096ef4745ca838285f019, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x23f0bee001b1029d5255075ddc957f833418cad4f52b6c3f8ce16c235572575b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2bc1ae8b8ddbb81fcaac2d44555ed5685d142633e9df905f66d9401093082d59, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0f9406b8296564a37304507b8dba3ed162371273a07b1fc98011fcd6ad72205f, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x2360a8eb0cc7defa67b72998de90714e17e75b174a52ee4acb126c8cd995f0a8, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x15871a5cddead976804c803cbaef255eb4815a5e96df8b006dcbbc2767f88948, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193a56766998ee9e0a8652dd2f3b1da0362f4f54f72379544f957ccdeefb420f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x2a394a43934f86982f9be56ff4fab1703b2e63c8ad334834e4309805e777ae0f, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1859954cfeb8695f3e8b635dcb345192892cd11223443ba7b4166e8876c0d142, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x04e1181763050e58013444dbcb99f1902b11bc25d90bbdca408d3819f4fed32b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0fdb253dee83869d40c335ea64de8c5bb10eb82db08b5e8b1f5e5552bfd05f23, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x058cbe8a9a5027bdaa4efb623adead6275f08686f1c08984a9d7c5bae9b4f1c0, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x1382edce9971e186497eadb1aeb1f52b23b4b83bef023ab0d15228b4cceca59a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x03464990f045c6ee0819ca51fd11b0be7f61b8eb99f14b77e1e6634601d9e8b5, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x23f7bfc8720dc296fff33b41f98ff83c6fcab4605db2eb5aaa5bc137aeb70a58, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x0a59a158e3eec2117e6e94e7f0e9decf18c3ffd5e1531a9219636158bbaf62f2, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x06ec54c80381c052b58bf23b312ffd3ce2c4eba065420af8f4c23ed0075fd07b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x118872dc832e0eb5476b56648e867ec8b09340f7a7bcb1b4962f0ff9ed1f9d01, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x13d69fa127d834165ad5c7cba7ad59ed52e0b0f0e42d7fea95e1906b520921b1, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x169a177f63ea681270b1c6877a73d21bde143942fb71dc55fd8a49f19f10c77b, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x04ef51591c6ead97ef42f287adce40d93abeb032b922f66ffb7e9a5a7450544d, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x256e175a1dc079390ecd7ca703fb2e3b19ec61805d4f03ced5f45ee6dd0f69ec, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x30102d28636abd5fe5f2af412ff6004f75cc360d3205dd2da002813d3e2ceeb2, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x10998e42dfcd3bbf1c0714bc73eb1bf40443a3fa99bef4a31fd31be182fcc792, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x193edd8e9fcf3d7625fa7d24b598a1d89f3362eaf4d582efecad76f879e36860, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x18168afd34f2d915d0368ce80b7b3347d1c7a561ce611425f2664d7aa51f0b5d, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x29383c01ebd3b6ab0c017656ebe658b6a328ec77bc33626e29e2e95b33ea6111, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x10646d2f2603de39a1f4ae5e7771a64a702db6e86fb76ab600bf573f9010c711, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0beb5e07d1b27145f575f1395a55bf132f90c25b40da7b3864d0242dcb1117fb, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x16d685252078c133dc0d3ecad62b5c8830f95bb2e54b59abdffbf018d96fa336, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x0a6abd1d833938f33c74154e0404b4b40a555bbbec21ddfafd672dd62047f01a, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1a679f5d36eb7b5c8ea12a4c2dedc8feb12dffeec450317270a6f19b34cf1860, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x0980fb233bd456c23974d50e0ebfde4726a423eada4e8f6ffbc7592e3f1b93d6, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x161b42232e61b84cbf1810af93a38fc0cece3d5628c9282003ebacb5c312c72b, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0ada10a90c7f0520950f7d47a60d5e6a493f09787f1564e5d09203db47de1a0b, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1a730d372310ba82320345a29ac4238ed3f07a8a2b4e121bb50ddb9af407f451, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x2c8120f268ef054f817064c369dda7ea908377feaba5c4dffbda10ef58e8c556, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1c7c8824f758753fa57c00789c684217b930e95313bcb73e6e7b8649a4968f70, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x2cd9ed31f5f8691c8e39e4077a74faa0f400ad8b491eb3f7b47b27fa3fd1cf77, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x23ff4f9d46813457cf60d92f57618399a5e022ac321ca550854ae23918a22eea, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x09945a5d147a4f66ceece6405dddd9d0af5a2c5103529407dff1ea58f180426d, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x188d9c528025d4c2b67660c6b771b90f7c7da6eaa29d3f268a6dd223ec6fc630, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x3050e37996596b7f81f68311431d8734dba7d926d3633595e0c0d8ddf4f0f47f, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x15af1169396830a91600ca8102c35c426ceae5461e3f95d89d829518d30afd78, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x1da6d09885432ea9a06d9f37f873d985dae933e351466b2904284da3320d8acc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := add(0x2796ea90d269af29f5f8acf33921124e4e4fad3dbe658945e546ee411ddaa9cb, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x202d7dd1da0f6b4b0325c8b3307742f01e15612ec8e9304a7cb0319e01d32d60, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x096d6790d05bb759156a952ba263d672a2d7f9c788f4c831a29dace4c0f8be5f, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := add(0x054efa1f65b0fce283808965275d877b438da23ce5b13e1963798cb1447d25a4, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x1b162f83d917e93edb3308c29802deb9d8aa690113b2e14864ccf6e18e4165f1, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x21e5241e12564dd6fd9f1cdd2a0de39eedfefc1466cc568ec5ceb745a0506edc, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x1cfb5662e8cf5ac9226a80ee17b36abecb73ab5f87e161927b4349e10e4bdf08, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x0f21177e302a771bbae6d8d1ecb373b62c99af346220ac0129c53f666eb24100, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1671522374606992affb0dd7f71b12bec4236aede6290546bcef7e1f515c2320, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n      scratch0 := add(0x0fa3ec5b9488259c2eb4cf24501bfad9be2ec9e42c5cc8ccd419d2a692cad870, add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)))\n      scratch1 := add(0x193c0e04e0bd298357cb266c1506080ed36edce85c648cc085e8c57b1ab54bba, add(add(mulmod(state0, M01, F), mulmod(state1, M11, F)), mulmod(state2, M21, F)))\n      scratch2 := add(0x102adf8ef74735a27e9128306dcbc3c99f6f7291cd406578ce14ea2adaba68f8, add(add(mulmod(state0, M02, F), mulmod(state1, M12, F)), mulmod(state2, M22, F)))\n      state0 := mulmod(scratch0, scratch0, F)\n      scratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n      state0 := mulmod(scratch1, scratch1, F)\n      scratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n      state0 := mulmod(scratch2, scratch2, F)\n      scratch2 := mulmod(mulmod(state0, state0, F), scratch2, F)\n      state0 := add(0x0fe0af7858e49859e2a54d6f1ad945b1316aa24bfbdd23ae40a6d0cb70c3eab1, add(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), mulmod(scratch2, M20, F)))\n      state1 := add(0x216f6717bbc7dedb08536a2220843f4e2da5f1daa9ebdefde8a5ea7344798d22, add(add(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F)), mulmod(scratch2, M21, F)))\n      state2 := add(0x1da55cc900f0d21f4a3e694391918a1b3c23b2ac773c6b3ef88e2e4228325161, add(add(mulmod(scratch0, M02, F), mulmod(scratch1, M12, F)), mulmod(scratch2, M22, F)))\n      scratch0 := mulmod(state0, state0, F)\n      state0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n      scratch0 := mulmod(state1, state1, F)\n      state1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n      scratch0 := mulmod(state2, state2, F)\n      state2 := mulmod(mulmod(scratch0, scratch0, F), state2, F)\n\n      mstore(0x0, mod(add(add(mulmod(state0, M00, F), mulmod(state1, M10, F)), mulmod(state2, M20, F)), F))\n\n      return(0, 0x20)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}